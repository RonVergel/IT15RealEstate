                    if (offerText) card.setAttribute('data-offer', offerText);
                }
            });

            // Populate type filter options
            try {
                const typeFilter = document.getElementById('type-filter');
                const types = Array.from(new Set(Array.from(document.querySelectorAll('.deal-card')).map(c => (c.getAttribute('data-type') || '').trim()).filter(Boolean))).sort();
                types.forEach(t => { const o = document.createElement('option'); o.value = t; o.textContent = t; typeFilter.appendChild(o); });
            } catch {}

            // Offer buttons per card
            function wireOfferButtons(){
                document.querySelectorAll('.deal-cards[data-stage="Negotiation"] .deal-card').forEach(card => {
                    if (card.querySelector('.deal-offer-btn')) return;
                    const price = card.getAttribute('data-price') || '0';
                    const row = document.createElement('div');
                    row.className = 'flex justify-end gap-2 pt-2';
                    row.innerHTML = `<button type="button" class="px-2 py-1 text-xs rounded border deal-offer-btn" data-deal-id="${card.getAttribute('data-deal-id') || ''}" data-price="${price}">Set Offer</button>`;
                    card.appendChild(row);
                });
                document.querySelectorAll('.deal-offer-btn').forEach(btn => {
                    if (btn._wired) return; btn._wired = true;
                    btn.addEventListener('click', function(e){
                        e.stopPropagation();
                        const id = this.getAttribute('data-deal-id');
                        const price = this.getAttribute('data-price');
                        try { window.openOfferModal && window.openOfferModal(id, Number(price||0)); } catch {}
                    });
                });
            }
            if (!IS_ALL_DEALS) { wireOfferButtons(); }

            // Drag from New as well (when not All Deals)
            try {
                const isAllDeals = @(isAllDeals.ToString().ToLower());
                if (!isAllDeals) {
                    const newList = document.querySelector('.deal-cards[data-stage="New"]');
                    if (newList && window.Sortable) {
                        new Sortable(newList, { group:'deals', animation:150, ghostClass:'sortable-ghost', dragClass:'sortable-drag', onEnd: function(evt){
                            const dealId = evt.item.dataset.dealId;
                            const newStatus = evt.to.dataset.stage;
                            fetch('/Deals/MoveDeal', { method:'POST', headers:{ 'Content-Type':'application/x-www-form-urlencoded' }, body:`dealId=${dealId}&newStatus=${newStatus}` })
                                .then(r=>{ if(!r.ok) location.reload(); else try{ refreshCounts(); }catch{} })
                                .catch(()=>{ try{ refreshCounts(); }catch{} });
                        }});
                    }
                }
            } catch {}

            // Counts and sums
            function refreshSums(){
                document.querySelectorAll('.editable-column-header').forEach(h => {
                    const status = h.getAttribute('data-status');
                    const list = document.querySelector(`.deal-cards[data-stage="${status}"]`);
                    const sumEl = h.querySelector('.column-sum');
                    if (!list || !sumEl) return;
                    const cards = Array.from(list.children).filter(el => !el.classList.contains('hidden'));
                    const sum = cards.reduce((acc, el) => acc + (parseFloat(el.getAttribute('data-offer') || '0') || 0), 0);
                    sumEl.textContent = sum > 0 ? `â‚± ${sum.toLocaleString()}` : '';
