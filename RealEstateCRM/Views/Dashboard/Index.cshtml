@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using RealEstateCRM.Data
@using RealEstateCRM.Models
@using System.Text.Json
@model RealEstateCRM.Controllers.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<div class="space-y-8">
    <!-- Header -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
            <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">Agency Dashboard</h1>
            <p class="text-gray-600 mt-1">Overview of your real estate business</p>
        </div>
        <div class="text-sm text-gray-500">
            Last updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")
        </div>
    </div>

    <!-- Success/Error Toast Notification (top-right, matches other pages) -->
    <div id="toast-notification" class="fixed top-4 right-4 z-[10000] transform translate-x-full transition-transform duration-300 ease-in-out">
        <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 min-w-[300px]">
            <div class="flex items-center gap-3">
                <div id="toast-icon" class="flex-shrink-0">
                    <!-- Success icon -->
                    <svg id="toast-success-icon" class="h-6 w-6 text-green-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <!-- Error icon -->
                    <svg id="toast-error-icon" class="h-6 w-6 text-red-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <div class="flex-1">
                    <p id="toast-message" class="text-sm font-medium text-gray-900"></p>
                </div>
                <button id="toast-close" class="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors" aria-label="Close notification">
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Main Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Properties Card -->
        <div class="bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-lg p-6 relative overflow-hidden">
            <div class="absolute top-0 right-0 -mt-4 -mr-4 w-20 h-20 bg-blue-200 rounded-full opacity-20"></div>
            <div class="relative">
                <div class="flex items-center justify-between mb-2">
                    <h3 class="text-sm font-medium text-blue-700">Total Properties</h3>
                    <div class="p-2 bg-blue-200 rounded-lg">
                        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 21l8-8-8-8"></path>
                        </svg>
                    </div>
                </div>
                <div class="text-3xl font-bold text-blue-900">@Model.TotalProperties</div>
                <div class="text-sm text-blue-600 mt-1">
                    @Model.ActiveProperties Active Listings
                </div>
                <div class="mt-3">
                    <a href="/Properties" class="text-xs text-blue-600 hover:text-blue-800 font-medium">View All Properties →</a>
                </div>
            </div>
        </div>

        <!-- Deals Card -->
        <div class="bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-lg p-6 relative overflow-hidden">
            <div class="absolute top-0 right-0 -mt-4 -mr-4 w-20 h-20 bg-green-200 rounded-full opacity-20"></div>
            <div class="relative">
                <div class="flex items-center justify-between mb-2">
                    <h3 class="text-sm font-medium text-green-700">Total Deals</h3>
                    <div class="p-2 bg-green-200 rounded-lg">
                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                        </svg>
                    </div>
                </div>
                <div class="text-3xl font-bold text-green-900">@Model.TotalDeals</div>
                <div class="text-sm text-green-600 mt-1">
                    @Model.ClosedDeals Closed | @Model.InProgressDeals In Progress
                </div>
                <div class="mt-3">
                    <a href="/Deals" class="text-xs text-green-600 hover:text-green-800 font-medium">View All Deals →</a>
                </div>
            </div>
        </div>

        <!-- Contacts Card -->
        <div class="bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-lg p-6 relative overflow-hidden">
            <div class="absolute top-0 right-0 -mt-4 -mr-4 w-20 h-20 bg-purple-200 rounded-full opacity-20"></div>
            <div class="relative">
                <div class="flex items-center justify-between mb-2">
                    <h3 class="text-sm font-medium text-purple-700">Total Contacts</h3>
                    <div class="p-2 bg-purple-200 rounded-lg">
                        <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                </div>
                <div class="text-3xl font-bold text-purple-900">@Model.TotalContacts</div>
                <div class="text-sm text-purple-600 mt-1">
                    @Model.AgentContacts Agents | @Model.ClientContacts Clients
                </div>
                <div class="mt-3">
                    <a href="/Contacts" class="text-xs text-purple-600 hover:text-purple-800 font-medium">View All Contacts →</a>
                </div>
            </div>
        </div>

        <!-- Leads Card -->
        <div class="bg-gradient-to-br from-yellow-50 to-yellow-100 border border-yellow-200 rounded-lg p-6 relative overflow-hidden">
            <div class="absolute top-0 right-0 -mt-4 -mr-4 w-20 h-20 bg-yellow-200 rounded-full opacity-20"></div>
            <div class="relative">
                <div class="flex items-center justify-between mb-2">
                    <h3 class="text-sm font-medium text-yellow-700">Total Leads</h3>
                    <div class="p-2 bg-yellow-200 rounded-lg">
                        <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                    </div>
                </div>
                <div class="text-3xl font-bold text-yellow-900">@Model.TotalLeads</div>
                <div class="text-sm text-yellow-600 mt-1">
                    Active Prospects
                </div>
                <div class="mt-3">
                    <a href="/Leads" class="text-xs text-yellow-600 hover:text-yellow-800 font-medium">View All Leads →</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Metrics Row -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Active Listings Value -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Active Listings Value</h3>
                <div class="p-2 bg-blue-100 rounded-lg">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                    </svg>
                </div>
            </div>
            <div class="text-3xl font-bold text-gray-900 mb-2">₱@Model.TotalPropertyValue.ToString("N0")</div>
            <div class="text-sm text-gray-600">Total value of active properties</div>
        </div>

        <!-- Average Days on Market -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Avg Days on Market</h3>
                <div class="p-2 bg-orange-100 rounded-lg">
                    <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
            </div>
            <div class="text-3xl font-bold text-gray-900 mb-2">@Math.Round(Model.AverageDaysOnMarket, 0) Days</div>
            <div class="text-sm text-gray-600">Average time on market</div>
        </div>

        <!-- Average Price per SQFT -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Avg Price per SQFT</h3>
                <div class="p-2 bg-green-100 rounded-lg">
                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
                    </svg>
                </div>
            </div>
            <div class="text-3xl font-bold text-gray-900 mb-2">₱@Math.Round(Model.AveragePricePerSQFT, 0)</div>
            <div class="text-sm text-gray-600">Per square foot pricing</div>
        </div>
    </div>

    <!-- Average Client Salary (Monthly) -->
    <div class="bg-white border border-gray-200 rounded-lg p-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Average Client Salary (Last 12 months)</h3>
            <div class="text-sm text-gray-500">Monthly average — clients only</div>
        </div>

        <div>
            <canvas id="avgSalaryChart" width="800" height="240"></canvas>
        </div>
    </div>

    <!-- Recent Activity Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Recent Properties -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Recent Properties</h3>
                <a href="/Properties" class="text-sm text-blue-600 hover:text-blue-800">View All</a>
            </div>
            <div class="space-y-3">
                @if (Model.RecentProperties.Any())
                {
                    @foreach (var property in Model.RecentProperties)
                    {
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex-1">
                                <div class="font-medium text-gray-900 truncate">@property.Title</div>
                                <div class="text-sm text-gray-500 truncate">@property.Address</div>
                            </div>
                            <div class="text-right">
                                <div class="font-medium text-gray-900">₱@property.Price.ToString("N0")</div>
                                <div class="text-xs text-gray-500">@property.ListingTime.ToString("MMM dd")</div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-8 text-gray-500">
                        No properties yet
                    </div>
                }
            </div>
        </div>

        <!-- Recent Deals -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Recent Deals</h3>
                <a href="/Deals" class="text-sm text-blue-600 hover:text-blue-800">View All</a>
            </div>
            <div class="space-y-3">
                @if (Model.RecentDeals.Any())
                {
                    @foreach (var deal in Model.RecentDeals)
                    {
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex-1">
                                <div class="font-medium text-gray-900 truncate">@deal.Title</div>
                                <div class="text-sm text-gray-500 truncate">@(deal.ClientName ?? "No client")</div>
                            </div>
                            <div class="text-right">
                                @{
                                    var statusColor = deal.Status switch
                                    {
                                        "New" => "bg-blue-100 text-blue-800",
                                        "In Progress" => "bg-yellow-100 text-yellow-800",
                                        "Closed" => "bg-green-100 text-green-800",
                                        _ => "bg-gray-100 text-gray-800"
                                    };
                                }
                                <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full @statusColor">
                                    @deal.Status
                                </span>
                                <div class="text-xs text-gray-500 mt-1">@deal.CreatedDate.ToString("MMM dd")</div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-8 text-gray-500">
                        No deals yet
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Recent Contacts and Leads -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Recent Contacts -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Recent Contacts</h3>
                <a href="/Contacts" class="text-sm text-blue-600 hover:text-blue-800">View All</a>
            </div>
            <div class="space-y-3">
                @if (Model.RecentContacts.Any())
                {
                    @foreach (var contact in Model.RecentContacts)
                    {
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                                    <span class="text-xs font-medium text-purple-600">@contact.Name.Substring(0, 1).ToUpper()</span>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900">@contact.Name</div>
                                    <div class="text-sm text-gray-500">@(contact.Type ?? "Unknown")</div>
                                </div>
                            </div>
                            <div class="text-xs text-gray-500">
                                @contact.DateCreated.ToString("MMM dd")
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-8 text-gray-500">
                        No contacts yet
                    </div>
                }
            </div>
        </div>

        <!-- Recent Leads -->
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Recent Leads</h3>
                <a href="/Leads" class="text-sm text-blue-600 hover:text-blue-800">View All</a>
            </div>
            <div class="space-y-3">
                @if (Model.RecentLeads.Any())
                {
                    @foreach (var lead in Model.RecentLeads)
                    {
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                                    <span class="text-xs font-medium text-yellow-600">@lead.Name.Substring(0, 1).ToUpper()</span>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900">@lead.Name</div>
                                    <div class="text-sm text-gray-500">@(lead.LeadSource ?? "Direct")</div>
                                </div>
                            </div>
                            <div class="text-xs text-gray-500">
                                @lead.DateCreated.ToString("MMM dd")
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-8 text-gray-500">
                        No leads yet
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- New: Preferred Property Type by Occupation -->
    <div class="bg-white border border-gray-200 rounded-lg p-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Preferred Property Type by Occupation</h3>
            <div class="text-sm text-gray-500">Top occupations (by matches)</div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-start">
            <div>
                <label class="block text-sm text-gray-600 mb-2">Select Occupation</label>
                <select id="occupation-select" class="w-full border rounded px-3 py-2 text-sm">
                    @if (Model.PreferredPropertyTypesByOccupation != null && Model.PreferredPropertyTypesByOccupation.Any())
                    {
                        var first = true;
                        foreach (var s in Model.PreferredPropertyTypesByOccupation)
                        {
                            if (first)
                            {
                                <option value="@s.Occupation" selected>@s.Occupation (@s.Total)</option>
                            }
                            else
                            {
                                <option value="@s.Occupation">@s.Occupation (@s.Total)</option>
                            }
                            first = false;
                        }
                    }
                    else
                    {
                        <option disabled selected>No data available</option>
                    }
                </select>

                <div class="mt-4 text-sm text-gray-600">
                    These counts are derived from Deals (client name matches) and Properties (agent matches) for contacts/leads grouped by occupation.
                </div>
            </div>

            <div class="md:col-span-2">
                <canvas id="occupationChart" width="400" height="180"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Toast notification logic (matches other views)
            const toast = document.getElementById('toast-notification');
            const messageEl = document.getElementById('toast-message');
            const successIcon = document.getElementById('toast-success-icon');
            const errorIcon = document.getElementById('toast-error-icon');
            const closeBtn = document.getElementById('toast-close');

            function showToast(message, type = 'success') {
                if (!toast) return;
                messageEl.textContent = message || '';
                if (type === 'success') {
                    successIcon.classList.remove('hidden');
                    errorIcon.classList.add('hidden');
                } else {
                    successIcon.classList.add('hidden');
                    errorIcon.classList.remove('hidden');
                }

                toast.classList.remove('translate-x-full');
                toast.classList.add('translate-x-0');

                setTimeout(() => {
                    hideToast();
                }, 3000);
            }

            function hideToast() {
                if (!toast) return;
                toast.classList.remove('translate-x-0');
                toast.classList.add('translate-x-full');
            }

            if (closeBtn) closeBtn.addEventListener('click', hideToast);

            // Show server-provided message (TempData)
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showToast('@Html.Raw(TempData["SuccessMessage"])', 'success');
                </text>
            }

            // Prepare occupation stats from server model
            const occStats = @Html.Raw(JsonSerializer.Serialize(Model.PreferredPropertyTypesByOccupation ?? new List<RealEstateCRM.Controllers.OccupationPropertyTypeStat>()));

            function getStatForOccupation(occupation) {
                if (!occStats || !occStats.length) return { Residential: 0, Commercial: 0, RawLand: 0, Other: 0 };
                const found = occStats.find(o => o.Occupation === occupation);
                if (!found) return { Residential: 0, Commercial: 0, RawLand: 0, Other: 0 };
                return {
                    Residential: found.Residential || 0,
                    Commercial: found.Commercial || 0,
                    RawLand: found.RawLand || 0,
                    Other: found.Other || 0
                };
            }

            // Initialize occupation chart
            const ctx = document.getElementById('occupationChart').getContext('2d');
            const defaultOcc = (occStats && occStats.length) ? occStats[0].Occupation : null;
            const initial = defaultOcc ? getStatForOccupation(defaultOcc) : { Residential: 0, Commercial: 0, RawLand: 0, Other: 0 };

            const occupationChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Residential', 'Commercial', 'Raw Land', 'Other'],
                    datasets: [{
                        label: defaultOcc ? `Preferred Types — ${defaultOcc}` : 'Preferred Types',
                        data: [initial.Residential, initial.Commercial, initial.RawLand, initial.Other],
                        backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#9CA3AF']
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            precision: 0
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: { mode: 'index', intersect: false }
                    }
                }
            });

            const select = document.getElementById('occupation-select');
            if (select) {
                select.addEventListener('change', function () {
                    const occ = this.value;
                    const s = getStatForOccupation(occ);
                    occupationChart.data.datasets[0].data = [s.Residential, s.Commercial, s.RawLand, s.Other];
                    occupationChart.data.datasets[0].label = `Preferred Types — ${occ}`;
                    occupationChart.update();
                });
            }

            // =========================
            // Average Client Salary Chart (monthly)
            // =========================
            const salaryLabels = @Html.Raw(JsonSerializer.Serialize(Model.AvgClientSalaryLabels ?? new List<string>()));
            const salaryValues = @Html.Raw(JsonSerializer.Serialize(Model.AvgClientSalaryValues ?? new List<decimal>()));

            (function renderSalaryChart() {
                const ctxSalary = document.getElementById('avgSalaryChart').getContext('2d');
                const data = {
                    labels: salaryLabels,
                    datasets: [{
                        label: 'Avg Salary (₱)',
                        data: salaryValues,
                        borderColor: '#2563EB',
                        backgroundColor: 'rgba(37,99,235,0.12)',
                        fill: true,
                        tension: 0.3,
                        pointRadius: 3
                    }]
                };

                const options = {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    if (value === 0) return '₱0';
                                    return '₱' + Number(value).toLocaleString();
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const v = context.parsed.y ?? 0;
                                    return 'Avg Salary: ₱ ' + Number(v).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                                }
                            }
                        }
                    }
                };

                new Chart(ctxSalary, { type: 'line', data, options });
            })();
        });
    </script>
}