@model List<RealEstateCRM.Models.Property>
@{
   ViewData["Title"] = "Properties";
}

<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-6">
    <h1 class="font-semibold text-2xl">Properties</h1>

    <button id="add-property-btn" class="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
        Add Property
    </button>
    <input type="hidden" id="current-query-values"
           data-q="@ViewBag.Q"
           data-property-type="@ViewBag.FilterPropertyType"
           data-listing-status="@ViewBag.FilterListingStatus"
           data-min-price="@ViewBag.FilterMinPrice"
           data-max-price="@ViewBag.FilterMaxPrice"
           data-min-beds="@ViewBag.FilterMinBeds"
           data-min-baths="@ViewBag.FilterMinBaths"
           data-buying-type="@ViewBag.FilterBuyingType"
           data-assigned="@ViewBag.FilterAssigned" />
</div>

<!-- Current user meta for client scripts -->
@{
    var currentDisplayName = User?.Claims?.FirstOrDefault(c => c.Type == "FullName")?.Value ?? User.Identity?.Name ?? "You";
}
<div id="current-user-meta" data-display-name="@currentDisplayName" class="hidden"></div>

<!-- Search / controls (keeps your existing row) -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
    <form id="filter-form" method="get" asp-action="Index" asp-controller="Properties" class="flex-1 flex flex-col sm:flex-row sm:items-center gap-4">
        <div class="flex-1 max-w-2xl">
            <label class="relative block">
                <span class="sr-only">Search</span>
                <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M11 19a8 8 0 1 1 0-16 8 8 0 0 1 0 16z" />
                    </svg>
                </span>
                <input id="search-input" type="search" name="q" value="@ViewBag.Q" placeholder="Search..."
                       class="w-full sm:w-[275px] pl-10 pr-4 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400" />
            </label>
        </div>
        <div class="flex items-center gap-2">
            <button type="button" id="toggle-filter" class="flex items-center gap-2 px-3 py-2 text-sm bg-white border rounded-md text-gray-600 hover:bg-gray-50">
                <svg class="h-4 w-4 text-gray-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 5h18M6 12h12M10 19h4" />
                </svg>
                <span>Filter</span>
            </button>
            <button type="submit" class="px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700">Apply</button>
            <a href="/Properties" class="px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">Clear</a>
        </div>

        <!-- Filter panel -->
        <div id="filter-panel" class="w-full grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 bg-white border rounded-lg p-3 mt-3 hidden">
            <div>
                <label class="block text-xs text-gray-600 mb-1">Property Type</label>
                <select name="propertyType" class="w-full px-2 py-2 border rounded text-sm">
                    <option value="">Any</option>
                    @foreach (var pt in (IEnumerable<string>) (ViewBag.PropertyTypes ?? new List<string>()))
                    {
                        if (ViewBag.FilterPropertyType == pt) {<option value="@pt" selected>@pt</option>}
                        else {<option value="@pt">@pt</option>}
                    }
                </select>
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Listing Status</label>
                <select name="listingStatus" class="w-full px-2 py-2 border rounded text-sm">
                    <option value="">Any</option>
                    @foreach (var ls in (IEnumerable<string>) (ViewBag.ListingStatuses ?? new List<string>()))
                    {
                        if (ViewBag.FilterListingStatus == ls) {<option value="@ls" selected>@ls</option>}
                        else {<option value="@ls">@ls</option>}
                    }
                </select>
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Buying Type</label>
                <select name="buyingType" class="w-full px-2 py-2 border rounded text-sm">
                    <option value="">Any</option>
                    @foreach (var bt in (IEnumerable<string>) (ViewBag.BuyingTypes ?? new List<string>()))
                    {
                        if (ViewBag.FilterBuyingType == bt) {<option value="@bt" selected>@bt</option>}
                        else {<option value="@bt">@bt</option>}
                    }
                </select>
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Assignment</label>
                <select name="assigned" class="w-full px-2 py-2 border rounded text-sm">
                    @if (string.IsNullOrEmpty(ViewBag.FilterAssigned)) {<option value="" selected>Any</option>} else {<option value="">Any</option>}
                    @if (ViewBag.FilterAssigned == "assigned") {<option value="assigned" selected>Assigned</option>} else {<option value="assigned">Assigned</option>}
                    @if (ViewBag.FilterAssigned == "unassigned") {<option value="unassigned" selected>Unassigned</option>} else {<option value="unassigned">Unassigned</option>}
                </select>
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Min Price</label>
                <input type="number" name="minPrice" value="@ViewBag.FilterMinPrice" class="w-full px-2 py-2 border rounded text-sm" />
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Max Price</label>
                <input type="number" name="maxPrice" value="@ViewBag.FilterMaxPrice" class="w-full px-2 py-2 border rounded text-sm" />
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Min Beds</label>
                <input type="number" name="minBeds" value="@ViewBag.FilterMinBeds" class="w-full px-2 py-2 border rounded text-sm" />
            </div>
            <div>
                <label class="block text-xs text-gray-600 mb-1">Min Baths</label>
                <input type="number" name="minBaths" value="@ViewBag.FilterMinBaths" class="w-full px-2 py-2 border rounded text-sm" />
            </div>
        </div>
    </form>
</div>

<!-- Success/Error Toast Notification -->
<div id="toast-notification" class="fixed top-4 right-4 z-[10000] transform translate-x-full transition-transform duration-300 ease-in-out">
    <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 w-full sm:w-auto sm:min-w-[300px] max-w-[90vw]">
        <div class="flex items-center gap-3">
            <div id="toast-icon" class="flex-shrink-0">
                <!-- Success icon -->
                <svg id="toast-success-icon" class="h-6 w-6 text-green-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <!-- Error icon -->
                <svg id="toast-error-icon" class="h-6 w-6 text-red-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div class="flex-1">
                <p id="toast-message" class="text-sm font-medium text-gray-900"></p>
            </div>
            <button id="toast-close" class="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- property cards -->
@{
    var placeholder = Url.Content("~/assets/images/property-placeholder.jpg");
}

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
    @if (Model != null && Model.Any())
    {
        @foreach (var property in Model)
        {
            var badgeColor = property.PropertyType == "Residential" ? "bg-blue-600" : 
                           property.PropertyType == "Commercial" ? "bg-green-600" : "bg-orange-600";
            var badgeText = property.PropertyType;
            var imageSrc = !string.IsNullOrEmpty(property.ImagePath) ? property.ImagePath : placeholder;
            
            <div class="property-card w-full bg-white border border-gray-200 rounded-md shadow-sm overflow-hidden flex flex-col cursor-pointer hover:shadow-md transition-all duration-200 p-3"
                 data-property-id="@property.Id"
                 data-property-title="@property.Title"
                 data-property-address="@property.Address"
                 data-property-price="@property.Price"
                 data-property-area="@(property.Area ?? 0)"
                 data-property-sqft="@(property.SQFT ?? 0)"
                 data-property-bedrooms="@(property.Bedrooms ?? 0)"
                 data-property-bathrooms="@(property.Bathrooms ?? 0)"
                 data-property-type="@property.PropertyType"
                 data-property-buying-type="@(property.Type ?? "")"
                 data-property-status="@(property.ListingStatus ?? "Unknown")"
                 data-property-listing-time="@property.ListingTime.ToString("yyyy-MM-ddTHH:mm")"
                 data-property-days-market="@(property.DaysOnMarket ?? 0)"
                 data-property-price-per-sqft="@(property.PricePerSQFT ?? 0)"
                 data-property-link="@(property.PropertyLink ?? "")"
                 data-property-agent="@(property.Agent ?? "")"
                 data-property-description="@(property.Description ?? "")"
                 data-property-image="@imageSrc">
                
                <!-- Image area -->
                <img src="@imageSrc" alt="Property image" class="w-full h-32 object-cover rounded-md mb-3" />

                <!-- Content area -->
                <div class="flex-1 flex flex-col">
                    <!-- Title and Badge -->
                    <div class="flex justify-between items-center">
                        <h3 class="font-bold text-sm text-gray-900 leading-tight pr-2">@property.Title</h3>
                        <span class="text-xs font-medium text-white px-2 py-0.5 rounded @badgeColor flex-shrink-0">
                            @badgeText
                        </span>
                    </div>

                    <!-- Address -->
                    <p class="text-xs text-gray-500 mt-1 truncate">@property.Address</p>

                    <!-- Icons -->
                    <div class="flex items-center gap-4 text-xs text-gray-600 mt-3 mb-1">
                        <div class="flex items-center gap-1.5">
                            <svg class="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3 7l1.5-2.5A2 2 0 007 3h10a2 2 0 011.5.5L21 7" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21V7h10v14" />
                            </svg>
                            <span>@(property.Bedrooms ?? 0)</span>
                        </div>
                        <div class="flex items-center gap-1.5">
                            <svg class="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M21 10c0 1.38-1.79 2.5-4 2.5S13 11.38 13 10s1.79-2.5 4-2.5 4 1.12 4 2.5z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10c0 1.38 1.79 2.5 4 2.5S11 11.38 11 10 9.21 7.5 7 7.5 3 8.62 3 10z" />
                            </svg>
                            <span>@(property.Bathrooms ?? 0)</span>
                        </div>
                        <div class="flex items-center gap-1.5">
                            <svg class="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3 7h18M7 7v14M17 7v14" />
                            </svg>
                            <span>@(property.Area ?? 0) sqm</span>
                        </div>
                    </div>

                    <!-- Price -->
                    <div class="mt-auto pt-2">
                        <p class="text-sm font-semibold text-green-600">₱ @property.Price.ToString("N0")</p>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <!-- Simple centered message -->
        <div class="col-span-full text-center py-16">
            <h3 class="text-lg font-medium text-gray-900 mb-2">No Properties Found!</h3>
            <p class="text-sm text-gray-500">Add your first property to get started.</p>
        </div>
    }
</div>

@* PAGINATION: Show previous / page numbers / next and an item range *@
@{
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var totalPages = ViewBag.TotalPages as int? ?? 1;
    var pageSize = ViewBag.PageSize as int? ?? 10;
    var totalCount = ViewBag.TotalCount as int? ?? 0;

    var startItem = totalCount == 0 ? 0 : ((currentPage - 1) * pageSize) + 1;
    var endItem = totalCount == 0 ? 0 : Math.Min(totalCount, currentPage * pageSize);

    // page range (show up to 5 pages centered on current)
    var start = Math.Max(1, currentPage - 2);
    var end = Math.Min(totalPages, currentPage + 2);
    if (currentPage <= 2) { end = Math.Min(totalPages, 5); }
    if (currentPage > totalPages - 2) { start = Math.Max(1, totalPages - 4); }
}

@if (totalPages > 1)
{
    <div class="mt-6 flex flex-col md:flex-row items-center justify-between gap-3">
        <div class="text-sm text-gray-600">
            Showing <span class="font-medium">@startItem</span> - <span class="font-medium">@endItem</span> of <span class="font-medium">@totalCount</span>
        </div>

        <nav class="inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            @* Previous *@
            <a asp-action="Index" asp-controller="Properties" asp-route-page="@(currentPage - 1)" asp-route-q="@ViewBag.Q" asp-route-propertyType="@ViewBag.FilterPropertyType" asp-route-listingStatus="@ViewBag.FilterListingStatus" asp-route-minPrice="@ViewBag.FilterMinPrice" asp-route-maxPrice="@ViewBag.FilterMaxPrice" asp-route-minBeds="@ViewBag.FilterMinBeds" asp-route-minBaths="@ViewBag.FilterMinBaths" asp-route-buyingType="@ViewBag.FilterBuyingType" asp-route-assigned="@ViewBag.FilterAssigned"
               class="px-3 py-2 rounded-l-md border border-gray-200 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 @(currentPage <= 1 ? "opacity-50 pointer-events-none" : "")"
               aria-disabled="@(currentPage <= 1)">
                Previous
            </a>

            @* Page numbers *@
            @for (int p = start; p <= end; p++)
            {
                if (p == currentPage)
                {
                    <span class="px-3 py-2 border-t border-b border-gray-200 bg-blue-600 text-white text-sm font-medium">@p</span>
                }
                else
                {
                    <a asp-action="Index" asp-controller="Properties" asp-route-page="@p" asp-route-q="@ViewBag.Q" asp-route-propertyType="@ViewBag.FilterPropertyType" asp-route-listingStatus="@ViewBag.FilterListingStatus" asp-route-minPrice="@ViewBag.FilterMinPrice" asp-route-maxPrice="@ViewBag.FilterMaxPrice" asp-route-minBeds="@ViewBag.FilterMinBeds" asp-route-minBaths="@ViewBag.FilterMinBaths" asp-route-buyingType="@ViewBag.FilterBuyingType" asp-route-assigned="@ViewBag.FilterAssigned" class="px-3 py-2 border border-gray-200 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">@p</a>
                }
            }

            @* Next *@
            <a asp-action="Index" asp-controller="Properties" asp-route-page="@(currentPage + 1)" asp-route-q="@ViewBag.Q" asp-route-propertyType="@ViewBag.FilterPropertyType" asp-route-listingStatus="@ViewBag.FilterListingStatus" asp-route-minPrice="@ViewBag.FilterMinPrice" asp-route-maxPrice="@ViewBag.FilterMaxPrice" asp-route-minBeds="@ViewBag.FilterMinBeds" asp-route-minBaths="@ViewBag.FilterMinBaths" asp-route-buyingType="@ViewBag.FilterBuyingType" asp-route-assigned="@ViewBag.FilterAssigned"
               class="px-3 py-2 rounded-r-md border border-gray-200 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 @(currentPage >= totalPages ? "opacity-50 pointer-events-none" : "")"
               aria-disabled="@(currentPage >= totalPages)">
                Next
            </a>
        </nav>
    </div>
}

<!-- Property Details Modal -->
<!-- Property Details Modal -->
<div id="property-details-modal" class="fixed inset-0 z-[9999] hidden opacity-0 transition-opacity duration-300 ease-out" style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
    <!-- Background overlay -->
    <div class="absolute inset-0 transition-all duration-300 ease-out" id="property-details-backdrop" style="background-color: rgba(29, 29, 29, 0); transition: background-color 300ms ease-out;"></div>

    <!-- Modal content container -->
    <div class="relative h-full w-full flex items-center justify-center p-4">
        <!-- Modal dialog -->
        <div class="relative bg-white rounded-xl shadow-2xl w-[860px] h-[90vh] max-w-[95vw] max-h-[95vh] overflow-hidden transform scale-95 transition-transform duration-300 ease-out" id="property-details-content">
            <!-- Header with close and edit buttons -->
            <div class="flex items-center justify-between p-4 border-b border-gray-200 bg-gray-50">
                <h3 class="text-lg font-semibold text-gray-900" id="modal-property-title">Property Details</h3>
                <div class="flex items-center gap-2">
                    <button id="edit-mode-btn" class="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors" title="Edit Property">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                        </svg>
                    </button>
                    <button id="save-changes-btn" class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition-colors hidden" title="Save Changes">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    </button>
                    <button id="cancel-edit-btn" class="px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors hidden" title="Cancel Edit">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                    <button id="close-property-details-btn" class="text-gray-400 hover:text-gray-600 focus:outline-none transition-colors duration-200" aria-label="Close">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Scrollable content -->
            <div class="overflow-y-auto h-full pb-16">
                <!-- Property Image -->
                <div class="w-full h-48 bg-gray-200">
                    <img src="@placeholder" alt="Property" class="w-full h-full object-cover" id="modal-property-image" />
                </div>

                <!-- Property Information -->
                <div class="p-6 space-y-6">
                    <!-- Anti-forgery token specifically for this modal (renders hidden input) -->
                    @Html.AntiForgeryToken()

                    <!-- Hidden property ID for updates -->
                    <input type="hidden" id="modal-property-id" />

                    <!-- Editable Image input (only visible in edit mode) -->
                    <div class="editable-field">
                        <label class="text-sm text-gray-600 block mb-1 edit-mode hidden">Change Image</label>
                        <input type="file" id="edit-property-image" name="ImageFile" accept="image/*" class="edit-mode hidden block mb-2" />
                        <div id="edit-image-preview-container" class="edit-mode hidden">
                            <img id="edit-image-preview" class="w-full h-40 object-cover rounded border border-gray-200" alt="New image preview" />
                            <button type="button" id="remove-edit-image" class="mt-2 px-3 py-1 text-xs bg-red-100 text-red-700 rounded">Remove</button>
                        </div>
                    </div>

                    <!-- Basic Info -->
                    <div>
                        <!-- Editable Property Name -->
                        <div class="editable-field mb-2">
                            <span class="view-mode text-lg font-semibold text-gray-900" id="modal-property-name">Property Name</span>
                            <input type="text" class="edit-mode hidden w-full text-lg font-semibold text-gray-900 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-name" />
                        </div>

                        <!-- Editable Address -->
                        <div class="editable-field mb-1">
                            <p class="view-mode text-gray-600" id="modal-property-address">Address</p>
                            <input type="text" class="edit-mode hidden w-full text-gray-700 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-address" />
                        </div>

                        <!-- summary badges removed per request -->
                    </div>

                    <!-- About the Property -->
                    <div>
                        <h5 class="text-md font-semibold text-gray-900 mb-2">About the Property</h5>
                        <div class="editable-field">
                            <p class="view-mode text-sm text-gray-600 leading-relaxed" id="modal-property-description">
                                Property description will appear here...
                            </p>
                            <textarea class="edit-mode hidden w-full text-sm text-gray-700 border border-gray-300 rounded-lg px-3 py-2 resize-none focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" rows="3" id="edit-property-description"></textarea>
                        </div>
                    </div>

                    <!-- Details Grid -->
                    <div>
                        <h5 class="text-md font-semibold text-gray-900 mb-3">Details</h5>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div class="space-y-2">
                                <!-- Property Type -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Property Type</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-property-type">Residential</span>
                                        <select class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-type">
                                            <option value="Residential">Residential</option>
                                            <option value="Commercial">Commercial</option>
                                            <option value="Raw Land">Raw Land</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Status -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Status</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-property-status">Active</span>
                                        <select class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-status">
                                            <option value="Active">Active</option>
                                            <option value="Pending">Pending</option>
                                            <option value="Sold">Sold</option>
                                            <option value="Off Market">Off Market</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Price -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Price</span>
                                    <div class="editable-field">
                            <span class="view-mode font-medium" id="modal-property-price">₱ 9,999,999</span>
                                        <input type="number" class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 w-40 text-right focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-price" min="0" step="0.01" />
                                    </div>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <!-- Type -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Type</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-property-buying-type">House</span>
                                        <select class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-buying-type">
                                            <option value="Buying">Buying</option>
                                            <option value="Viewing">Viewing</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Days on Market (Read-only) -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Days on Market</span>
                                    <span class="font-medium" id="modal-days-on-market">30</span>
                                </div>

                                <!-- Price/sqft (Read-only) -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Price/sqft</span>
                                    <span class="font-medium" id="modal-price-per-sqft">₱ 50,000</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Property Information -->
                    <div>
                        <h5 class="text-md font-semibold text-gray-900 mb-3">Property Information</h5>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div class="space-y-2">
                                <!-- Listed On -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Listed On</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-listing-date">2020</span>
                                        <input type="datetime-local" class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-listing-date" />
                                    </div>
                                </div>

                                <!-- SQFT (Read-only) -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">SQFT</span>
                                    <span class="font-medium" id="modal-sqft">1,200</span>
                                </div>

                                <!-- Area -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Area (sqm)</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-area-display">120</span>
                                        <input type="number" class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 w-24 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-area" min="0" />
                                    </div>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <!-- Bedrooms -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Bedrooms</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-bedrooms">4</span>
                                        <input type="number" class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 w-20 text-center focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-bedrooms" min="0" />
                                    </div>
                                </div>

                                <!-- Bathrooms -->
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Bathrooms</span>
                                    <div class="editable-field">
                                        <span class="view-mode font-medium" id="modal-bathrooms">2</span>
                                        <input type="number" class="edit-mode hidden text-sm border border-gray-300 rounded-lg px-3 py-2 w-20 text-center focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-bathrooms" min="0" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Added by & Owner -->
                    <div>
                        <div class="space-y-3">
                            <div>
                                <h6 class="text-sm font-medium text-gray-700 mb-1">Added by</h6>
                                <div class="flex items-center gap-2">
                                    <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                        <span class="text-xs font-medium text-blue-600" id="modal-agent-initials">AG</span>
                                    </div>
                                    <div class="flex-1">
                                        <div class="editable-field">
                                            <p class="view-mode text-sm font-medium text-gray-900" id="modal-agent-name">Current User</p>
                                            <!-- This input still represents the Assigned Agent when editing -->
                                            <input type="text" class="edit-mode hidden text-sm font-medium text-gray-900 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-agent-name" />
                                        </div>
                                        <p class="text-xs text-gray-500">Created by</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Property Link -->
                            <div id="property-link-section">
                                <div class="editable-field">
                                    <div class="view-mode">
                                        <a href="#" target="_blank" id="modal-property-link" class="inline-flex items-center text-sm text-blue-600 hover:text-blue-800 transition-colors">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                            </svg>
                                            <span id="property-link-text">View Property Details</span>
                                        </a>
                                    </div>
                                    <div class="edit-mode hidden">
                                        <label class="text-xs text-gray-600">Property Link:</label>
                                        <input type="url" class="w-full text-sm border border-gray-300 rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent" id="edit-property-link" placeholder="https://example.com/property" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Property Modal -->
<div id="add-property-modal" class="fixed inset-0 z-[9999] hidden opacity-0 transition-opacity duration-300 ease-out" style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
    <!-- Background overlay with custom color #1D1D1D -->
    <div class="absolute inset-0 transition-all duration-300 ease-out modal-backdrop-custom" id="modal-backdrop" style="background-color: rgba(29, 29, 29, 0); transition: background-color 300ms ease-out;"></div>

    <!-- Modal content container -->
    <div class="relative h-full w-full flex items-center justify-center p-4">
        <!-- Modal dialog -->
        <div class="relative bg-white rounded-lg shadow-xl w-[900px] h-[900px] max-w-[95vw] max-h-[95vh] overflow-auto transform scale-95 transition-transform duration-300 ease-out" id="modal-content">
            <!-- Close button -->
            <div class="absolute top-4 right-4 z-10">
                <button id="close-modal-btn" class="text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600 transition-colors duration-200" aria-label="Close">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- Modal content -->
            <div class="p-8">
                <h3 class="text-xl font-semibold text-gray-900 text-center mb-6">Add New Property</h3>

                <form asp-controller="Properties" asp-action="Create" method="post" enctype="multipart/form-data" class="space-y-4">
                    @Html.AntiForgeryToken()
                    
                    <!-- Property Image Upload -->
                    <div>
                        <label for="property-image" class="block text-sm font-medium text-gray-700 mb-1">Property Image</label>
                        <div class="relative">
                            <input type="file" id="property-image" name="ImageFile" accept="image/*"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                            <p class="text-xs text-gray-500 mt-1">Accepted formats: JPG, PNG, GIF, BMP. Max size: 5MB</p>
                        </div>
                        <!-- Image preview -->
                        <div id="image-preview" class="mt-3 hidden">
                            <img id="preview-image" class="w-32 h-32 object-cover rounded-lg border border-gray-300" alt="Preview" />
                            <button type="button" id="remove-image" class="mt-2 text-sm text-red-600 hover:text-red-800">Remove Image</button>
                        </div>
                    </div>
                    
                    <!-- Property Title (Required) -->
                    <div>
                        <label for="property-title" class="block text-sm font-medium text-gray-700 mb-1">
                            Property Title <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="property-title" name="Title" required 
                               placeholder="e.g., Beautiful Family Home"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                    </div>

                    <!-- Address (Required) -->
                    <div>
                        <label for="property-address" class="block text-sm font-medium text-gray-700 mb-1">
                            Address <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="property-address" name="Address" required 
                               placeholder="e.g., 1234 Greenfield Avenue, Quezon City"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                    </div>

                    <!-- Two-column layout for numbers -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- Property Price -->
                        <div>
                            <label for="property-price" class="block text-sm font-medium text-gray-700 mb-1">Property Price (?)</label>
                            <input type="number" id="property-price" name="Price" min="0" step="0.01"
                                   placeholder="e.g., 5000000"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                        </div>

                        <!-- Area -->
                        <div>
                            <label for="property-area" class="block text-sm font-medium text-gray-700 mb-1">Area (sqm)</label>
                            <input type="number" id="property-area" name="Area" min="0"
                                   placeholder="e.g., 120"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                        </div>

                        <!-- Bedrooms -->
                        <div>
                            <label for="property-bedrooms" class="block text-sm font-medium text-gray-700 mb-1">Bedrooms</label>
                            <input type="number" id="property-bedrooms" name="Bedrooms" min="0"
                                   placeholder="e.g., 3"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                        </div>

                        <!-- Bathrooms -->
                        <div>
                            <label for="property-bathrooms" class="block text-sm font-medium text-gray-700 mb-1">Bathrooms</label>
                            <input type="number" id="property-bathrooms" name="Bathrooms" min="0"
                                   placeholder="e.g., 2"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                        </div>

                        <!-- Listing Time -->
                        <div class="md:col-span-2">
                            <label for="property-listing-time" class="block text-sm font-medium text-gray-700 mb-1">Listing Date</label>
                            <input type="datetime-local" id="property-listing-time" name="ListingTime"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                        </div>
                    </div>

                    <!-- Calculated Values Display -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-700 mb-3">Calculated Values</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600">SQFT:</span>
                                <span id="calculated-sqft" class="font-medium text-gray-900">-</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Price Per SQFT:</span>
                                <span id="calculated-price-per-sqft" class="font-medium text-gray-900">-</span>
                            </div>
                        </div>
                        <p class="text-xs text-gray-500 mt-2">Values are automatically calculated based on Area (sqm) and Price</p>
                    </div>

                    <!-- Property Type (Required) -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-3">
                            Property Type <span class="text-red-500">*</span>
                        </label>
                        <div class="flex gap-2">
                            <button type="button" class="property-type-btn px-4 py-2 text-sm font-medium rounded-lg border transition-all duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50" data-type="Residential">
                                Residential
                            </button>
                            <button type="button" class="property-type-btn px-4 py-2 text-sm font-medium rounded-lg border transition-all duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50" data-type="Commercial">
                                Commercial
                            </button>
                            <button type="button" class="property-type-btn px-4 py-2 text-sm font-medium rounded-lg border transition-all duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50" data-type="Raw Land">
                                Raw Land
                            </button>
                        </div>
                        <input type="hidden" name="PropertyType" id="property-type" value="" required />
                    </div>

                    <!-- Type (Buying/Viewing) (Required) -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-3">
                            Type <span class="text-red-500">*</span>
                        </label>
                        <div class="flex gap-2">
                            <button type="button" class="type-btn px-4 py-2 text-sm font-medium rounded-lg border transition-all duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50" data-type="Buying">
                                Buying
                            </button>
                            <button type="button" class="type-btn px-4 py-2 text-sm font-medium rounded-lg border transition-all duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50" data-type="Viewing">
                                Viewing
                            </button>
                        </div>
                        <input type="hidden" name="Type" id="property-buying-type" value="" required />
                    </div>

                    <!-- Listing Status -->
                    <div>
                        <label for="property-listing-status" class="block text-sm font-medium text-gray-700 mb-1">Listing Status</label>
                        <select id="property-listing-status" name="ListingStatus"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200">
                            <option value="Active">Active</option>
                            <option value="Pending">Pending</option>
                            <option value="Sold">Sold</option>
                            <option value="Off Market">Off Market</option>
                        </select>
                    </div>

                    <!-- Property Link -->
                    <div>
                        <label for="property-link" class="block text-sm font-medium text-gray-700 mb-1">Property Link</label>
                        <input type="url" id="property-link" name="PropertyLink" 
                               placeholder="e.g., https://example.com/property/123"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" />
                    </div>

                    <!-- Agent (Dropdown populated from DB) -->
                    <div>
                        <label for="property-agent" class="block text-sm font-medium text-gray-700 mb-1">Assigned Agent</label>
                        <div class="relative">
                            <!-- Replace free-text datalist with a select dropdown populated from server via JS -->
                            <select id="property-agent" name="Agent" autocomplete="off"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200">
                                <option value="">-- Select an agent (optional) --</option>
                            </select>
                            <p class="text-xs text-gray-500 mt-1">Choose an agent from the list or leave blank.</p>
                        </div>
                    </div>

                    <!-- Description -->
                    <div>
                        <label for="property-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="property-description" name="Description" rows="3" 
                                  placeholder="Describe the property features, amenities, and highlights..."
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 resize-none"></textarea>
                    </div>

                    <div class="flex gap-3 pt-6">
                        <button type="submit" class="flex-1 px-4 py-2 bg-blue-600 text-white text-base font-medium rounded-lg shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200">
                            Save Property
                        </button>
                        <button type="button" id="cancel-modal-btn" class="flex-1 px-4 py-2 bg-gray-200 text-gray-800 text-base font-medium rounded-lg shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 transition-all duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM Content Loaded - Initializing Properties page...');

            var addPropertyBtn = document.getElementById('add-property-btn');
            var closeModalBtn = document.getElementById('close-modal-btn');
            var cancelModalBtn = document.getElementById('cancel-modal-btn');
            var modal = document.getElementById('add-property-modal');
            var modalBackdrop = document.getElementById('modal-backdrop');
            var modalContent = document.getElementById('modal-content');

            // Image upload elements
            var imageInput = document.getElementById('property-image');
            var imagePreview = document.getElementById('image-preview');
            var previewImage = document.getElementById('preview-image');
            var removeImageBtn = document.getElementById('remove-image');
            var currentImageObjectUrl = null;

            // Calculation elements
            var areaInput = document.getElementById('property-area');
            var priceInput = document.getElementById('property-price');
            var calculatedSqft = document.getElementById('calculated-sqft');
            var calculatedPricePerSqft = document.getElementById('calculated-price-per-sqft');

            // Agent dropdown elements
            var agentInput = document.getElementById('property-agent'); // now a select
            var agentsCache = []; // optional cache

            // Edit Mode State (for details modal)
            let isEditMode = false;
            let originalPropertyData = {};

            @* server placeholder var remains *@
            @{
                var placeholder = Url.Content("~/assets/images/property-placeholder.jpg");
            }

            // ===============================
            // Helper: debounce
            // ===============================
            function debounce(fn, wait) {
                let t;
                return function() {
                    const args = arguments;
                    clearTimeout(t);
                    t = setTimeout(() => fn.apply(this, args), wait);
                };
            }

            // ===============================
            // Agents fetching & select population
            // ===============================
            async function fetchAgents(query) {
                try {
                    const url = '/Properties/GetAgents' + (query ? '?q=' + encodeURIComponent(query) : '');
                    const res = await fetch(url, { credentials: 'same-origin' });
                    if (!res.ok) return [];
                    const data = await res.json();
                    if (!Array.isArray(data)) {
                        return Array.isArray(data.agents) ? data.agents : [];
                    }
                    return data;
                } catch (err) {
                    console.error('Error fetching agents:', err);
                    return [];
                }
            }

            function populateAgentsList(list) {
                if (!agentInput) return;
                // reset options, keep an empty placeholder
                agentInput.innerHTML = '<option value="">-- Select an agent (optional) --</option>';
                list.forEach(a => {
                    const opt = document.createElement('option');
                    opt.value = a.name;
                    opt.textContent = a.name;
                    agentInput.appendChild(opt);
                });
            }

            async function loadInitialAgents() {
                const agents = await fetchAgents('');
                agentsCache = agents;
                populateAgentsList(agents);
            }

            // ===============================
            // TOAST NOTIFICATION SYSTEM
            // ===============================
            function showToast(message, type = 'success') {
                const toast = document.getElementById('toast-notification');
                const messageEl = document.getElementById('toast-message');
                const successIcon = document.getElementById('toast-success-icon');
                const errorIcon = document.getElementById('toast-error-icon');

                messageEl.textContent = message;

                if (type === 'success') {
                    successIcon.classList.remove('hidden');
                    errorIcon.classList.add('hidden');
                } else {
                    successIcon.classList.add('hidden');
                    errorIcon.classList.remove('hidden');
                }

                toast.classList.remove('translate-x-full');
                toast.classList.add('translate-x-0');

                setTimeout(() => {
                    hideToast();
                }, 3000);
            }

            function hideToast() {
                const toast = document.getElementById('toast-notification');
                toast.classList.remove('translate-x-0');
                toast.classList.add('translate-x-full');
            }

            document.getElementById('toast-close').addEventListener('click', hideToast);

            // Check for success message from TempData
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showToast('@Html.Raw(TempData["SuccessMessage"])', 'success');
                </text>
            }

            // ===============================
            // MODAL FUNCTIONS - ADD PROPERTY MODAL
            // ===============================
            function openModal() {
                if (!modal) return;
                loadInitialAgents();

                // Reset preview and calculations when opening
                resetImagePreview();
                computeCalculatedValues();

                modal.style.display = 'flex';
                modal.classList.remove('hidden', 'opacity-0');
                modal.classList.add('opacity-100');

                if (modalBackdrop) {
                    modalBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0.4)';
                }

                if (modalContent) {
                    modalContent.classList.remove('scale-95');
                    modalContent.classList.add('scale-100');
                }

                document.body.style.overflow = 'hidden';
            }

            function closeModal() {
                if (!modal) return;

                modal.classList.add('opacity-0');
                modal.classList.remove('opacity-100');

                if (modalBackdrop) {
                    modalBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0)';
                }

                if (modalContent) {
                    modalContent.classList.add('scale-95');
                    modalContent.classList.remove('scale-100');
                }

                setTimeout(function () {
                    modal.classList.add('hidden');
                    modal.style.display = 'none';
                }, 300);

                document.body.style.overflow = '';

                // Reset form and UI
                const form = document.querySelector('form');
                if (form) form.reset();
                resetImagePreview();
                computeCalculatedValues(); // update displays to default
            }

            // ===============================
            // IMAGE PREVIEW HANDLERS
            // ===============================
            function showPreviewContainer() {
                if (!imagePreview) return;
                imagePreview.classList.remove('hidden');
                imagePreview.style.display = 'block';
            }
            function hidePreviewContainer() {
                if (!imagePreview) return;
                imagePreview.classList.add('hidden');
                imagePreview.style.display = 'none';
            }

            function resetImagePreview() {
                if (imageInput) imageInput.value = '';
                if (previewImage) {
                    previewImage.src = '';
                    previewImage.alt = '';
                }
                if (currentImageObjectUrl) {
                    try { URL.revokeObjectURL(currentImageObjectUrl); } catch (e) {}
                    currentImageObjectUrl = null;
                }
                hidePreviewContainer();
            }

            function handleImageSelected(e) {
                var file = (e.target && e.target.files && e.target.files[0]) || null;
                if (!file) {
                    resetImagePreview();
                    return;
                }

                var allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp'];
                if (allowedTypes.indexOf(file.type) === -1) {
                    showToast('Please upload a valid image file (JPG, PNG, GIF, BMP).', 'error');
                    resetImagePreview();
                    return;
                }

                var maxSize = 5 * 1024 * 1024; // 5MB
                if (file.size > maxSize) {
                    showToast('File size cannot exceed 5MB.', 'error');
                    resetImagePreview();
                    return;
                }

                try {
                    if (currentImageObjectUrl) {
                        try { URL.revokeObjectURL(currentImageObjectUrl); } catch (e) {}
                        currentImageObjectUrl = null;
                    }
                    var objectUrl = URL.createObjectURL(file);
                    currentImageObjectUrl = objectUrl;
                    if (previewImage) {
                        previewImage.src = objectUrl;
                        previewImage.alt = file.name || 'Preview';
                        showPreviewContainer();
                        previewImage.onload = function () {
                            if (currentImageObjectUrl) {
                                try { URL.revokeObjectURL(currentImageObjectUrl); } catch (e) {}
                                currentImageObjectUrl = null;
                            }
                            previewImage.onload = null;
                        };
                    }
                } catch (err) {
                    var reader = new FileReader();
                    reader.onload = function (ev) {
                        if (previewImage) {
                            previewImage.src = ev.target.result;
                            previewImage.alt = file.name || 'Preview';
                            showPreviewContainer();
                        }
                    };
                    reader.readAsDataURL(file);
                }
            }

            if (imageInput) {
                imageInput.addEventListener('change', handleImageSelected);
            }
            document.addEventListener('change', function (e) {
                if (e.target && e.target.id === 'property-image') {
                    handleImageSelected(e);
                }
            });
            if (removeImageBtn) {
                removeImageBtn.addEventListener('click', function (ev) {
                    ev.preventDefault();
                    resetImagePreview();
                });
            }

            // ===============================
            // CALCULATIONS: SQFT and Price Per SQFT
            // ===============================
            function computeCalculatedValues() {
                // Default display values
                if (!calculatedSqft) return;
                if (!calculatedPricePerSqft) return;

                var areaVal = areaInput ? parseFloat(areaInput.value) : NaN;
                var priceVal = priceInput ? parseFloat(priceInput.value) : NaN;

                // compute SQFT (1 sqm = 10.7639 sqft)
                if (!isNaN(areaVal) && areaVal > 0) {
                    var sqft = areaVal * 10.7639;
                    // display with 2 decimals
                    calculatedSqft.textContent = sqft.toFixed(2);
                } else {
                    calculatedSqft.textContent = '-';
                }

                // compute Price Per SQFT
                if (!isNaN(priceVal) && priceVal > 0 && !isNaN(areaVal) && areaVal > 0) {
                    var sqftForCalc = areaVal * 10.7639;
                    if (sqftForCalc > 0) {
                        var pricePerSqft = priceVal / sqftForCalc;
                        // Format with currency and 2 decimals
                        try {
                            calculatedPricePerSqft.textContent = '? ' + pricePerSqft.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        } catch (e) {
                            calculatedPricePerSqft.textContent = '? ' + pricePerSqft.toFixed(2);
                        }
                    } else {
                        calculatedPricePerSqft.textContent = '-';
                    }
                } else {
                    calculatedPricePerSqft.textContent = '-';
                }
            }

            // Listen for input changes
            if (areaInput) {
                areaInput.addEventListener('input', computeCalculatedValues);
            }
            if (priceInput) {
                priceInput.addEventListener('input', computeCalculatedValues);
            }

            // Ensure values are computed when modal opens or on page load
            hidePreviewContainer();
            computeCalculatedValues();

            // ===============================
            // PRESSABLES FIX: property-type and type buttons (single-select, keyboard accessible)
            // ===============================
            (function wirePressables() {
                var propTypeBtns = Array.from(document.querySelectorAll('.property-type-btn'));
                var typeBtns = Array.from(document.querySelectorAll('.type-btn'));
                var propTypeInput = document.getElementById('property-type');
                var buyingTypeInput = document.getElementById('property-buying-type');

                function normalizeText(btn) {
                    return (btn.dataset.type || btn.textContent || '').trim();
                }

                function applySelected(buttons, clicked, inputElem) {
                    var isActive = clicked.classList.contains('bg-blue-600');
                    if (isActive) {
                        // toggle off
                        clicked.classList.remove('bg-blue-600','text-white');
                        clicked.classList.add('bg-white','text-gray-700');
                        clicked.setAttribute('aria-pressed','false');
                        if (inputElem) inputElem.value = '';
                        return;
                    }

                    // single-select: clear others, mark clicked
                    buttons.forEach(b => {
                        b.classList.remove('bg-blue-600','text-white');
                        b.classList.add('bg-white','text-gray-700');
                        b.setAttribute('aria-pressed','false');
                    });
                    clicked.classList.add('bg-blue-600','text-white');
                    clicked.classList.remove('bg-white','text-gray-700');
                    clicked.setAttribute('aria-pressed','true');

                    if (inputElem) inputElem.value = normalizeText(clicked);
                }

                function attach(buttons, inputElem) {
                    buttons.forEach(btn => {
                        // ensure accessibility attributes
                        btn.setAttribute('role','button');
                        btn.setAttribute('tabindex','0');
                        if (!btn.hasAttribute('aria-pressed')) btn.setAttribute('aria-pressed','false');

                        btn.addEventListener('click', function (e) {
                            e.preventDefault();
                            applySelected(buttons, this, inputElem);
                        });

                        // support keyboard activation (Enter/Space)
                        btn.addEventListener('keydown', function (e) {
                            if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                applySelected(buttons, this, inputElem);
                            }
                        });
                    });
                }

                function initFromInput(buttons, inputElem) {
                    if (!inputElem || !inputElem.value) return;
                    var val = inputElem.value.trim().toLowerCase();
                    if (!val) return;
                    buttons.forEach(b => {
                        var t = normalizeText(b).toLowerCase();
                        if (t === val) {
                            b.classList.add('bg-blue-600','text-white');
                            b.classList.remove('bg-white','text-gray-700');
                            b.setAttribute('aria-pressed','true');
                        } else {
                            b.classList.remove('bg-blue-600','text-white');
                            b.classList.add('bg-white','text-gray-700');
                            b.setAttribute('aria-pressed','false');
                        }
                    });
                }

                // Attach handlers
                if (propTypeBtns.length) attach(propTypeBtns, propTypeInput);
                if (typeBtns.length) attach(typeBtns, buyingTypeInput);

                // Initialize visuals from hidden inputs (if any)
                initFromInput(propTypeBtns, propTypeInput);
                initFromInput(typeBtns, buyingTypeInput);
            })();

            // ===============================
            // PROPERTY DETAILS PREVIEW (BRING BACK PREVIEW FUNCTIONALITY)
            // ===============================
            const propertyDetailsModal = document.getElementById('property-details-modal');
            const propertyDetailsBackdrop = document.getElementById('property-details-backdrop');
            const propertyDetailsContent = document.getElementById('property-details-content');
            const closePropertyDetailsBtn = document.getElementById('close-property-details-btn');
            const editModeBtn = document.getElementById('edit-mode-btn');
            const saveChangesBtn = document.getElementById('save-changes-btn');
            const cancelEditBtn = document.getElementById('cancel-edit-btn');

            // New elements for editing image in modal
            const editImageInput = document.getElementById('edit-property-image');
            const editImagePreview = document.getElementById('edit-image-preview');
            const editImagePreviewContainer = document.getElementById('edit-image-preview-container');
            const removeEditImageBtn = document.getElementById('remove-edit-image');

            function formatCurrency(val) {
                if (val == null || val === '') return '₱ 0';
                try {
                    return '₱ ' + Number(val).toLocaleString();
                } catch {
                    return '₱ ' + val;
                }
            }

            function getInitials(name) {
                if (!name) return '';
                return name.split(' ').map(s => s[0]).join('').substring(0,2).toUpperCase();
            }

            function openPropertyDetailsModal(card) {
                if (!card || !propertyDetailsModal) return;

                // Save original model for cancel
                originalPropertyData = { ...card.dataset };

                // Populate modal fields
                const ds = card.dataset;

                document.getElementById('modal-property-title').textContent = ds.propertyTitle || 'Property Details';
                document.getElementById('modal-property-image').src = ds.propertyImage || '@placeholder';
                document.getElementById('modal-property-id').value = ds.propertyId || '';

                document.getElementById('modal-property-name').textContent = ds.propertyTitle || '';
                document.getElementById('edit-property-name').value = ds.propertyTitle || '';

                document.getElementById('modal-property-address').textContent = ds.propertyAddress || '';
                document.getElementById('edit-property-address').value = ds.propertyAddress || '';

                const bed = ds.propertyBedrooms || '0';
                const bath = ds.propertyBathrooms || '0';
                (function(){ const el = document.getElementById('modal-property-bed-bath'); if (el) el.textContent = `${bed} BR · ${bath} BA`; })();
                document.getElementById('modal-bedrooms').textContent = bed;
                document.getElementById('modal-bathrooms').textContent = bath;
                document.getElementById('edit-bedrooms').value = bed;
                document.getElementById('edit-bathrooms').value = bath;

                const area = ds.propertyArea || '0';
                const sqft = ds.propertySqft || '0';
                document.getElementById('modal-area-display').textContent = area;
                document.getElementById('modal-sqft').textContent = sqft;
                document.getElementById('edit-property-area').value = area;

                const price = ds.propertyPrice || '0';
                document.getElementById('modal-property-price').textContent = formatCurrency(price);
                document.getElementById('edit-property-price').value = price;

                document.getElementById('modal-property-description').textContent = ds.propertyDescription || 'No description';
                document.getElementById('edit-property-description').value = ds.propertyDescription || '';

                document.getElementById('modal-property-type').textContent = ds.propertyType || '';
                document.getElementById('edit-property-type').value = ds.propertyType || '';
                const typeEl = document.getElementById('edit-property-type');
                if (typeEl) {
                    for (let i = 0; i < typeEl.options.length; i++) {
                        if (typeEl.options[i].value === ds.propertyType) typeEl.selectedIndex = i;
                    }
                }

                document.getElementById('modal-property-status').textContent = ds.propertyStatus || '';
                const statusEl = document.getElementById('edit-property-status');
                if (statusEl) {
                    for (let i = 0; i < statusEl.options.length; i++) {
                        if (statusEl.options[i].value === ds.propertyStatus) statusEl.selectedIndex = i;
                    }
                }

                document.getElementById('modal-property-buying-type').textContent = ds.propertyBuyingType || '';
                const buyTypeEl = document.getElementById('edit-property-buying-type');
                if (buyTypeEl) {
                    for (let i = 0; i < buyTypeEl.options.length; i++) {
                        if (buyTypeEl.options[i].value === ds.propertyBuyingType) buyTypeEl.selectedIndex = i;
                    }
                }

                document.getElementById('modal-days-on-market').textContent = ds.propertyDaysMarket || '0';
                document.getElementById('modal-price-per-sqft').textContent = ds.propertyPricePerSqft ? '₱ ' + ds.propertyPricePerSqft : '-';

                // Listing date (card stores "yyyy-MM-ddTHH:mm")
                try {
                    const rawListing = ds.propertyListingTime || '';
                    if (rawListing) {
                        // show year in view-mode
                        const dtView = new Date(rawListing);
                        if (!isNaN(dtView)) {
                            document.getElementById('modal-listing-date').textContent = dtView.getFullYear();
                        } else {
                            document.getElementById('modal-listing-date').textContent = rawListing;
                        }

                        // set datetime-local input
                        const dtEdit = new Date(rawListing);
                        if (!isNaN(dtEdit)) {
                            // convert to ISO local (slice ensures "yyyy-MM-ddTHH:mm")
                            document.getElementById('edit-listing-date').value = dtEdit.toISOString().slice(0,16);
                        } else {
                            document.getElementById('edit-listing-date').value = '';
                        }
                    } else {
                        document.getElementById('modal-listing-date').textContent = '';
                        document.getElementById('edit-listing-date').value = '';
                    }
                } catch (e) {
                    document.getElementById('modal-listing-date').textContent = '';
                    document.getElementById('edit-listing-date').value = '';
                }

                // Added by (always current logged-in user)
                const currentUserMeta = document.getElementById('current-user-meta');
                const addedByName = currentUserMeta ? currentUserMeta.dataset.displayName : '';
                document.getElementById('modal-agent-name').textContent = addedByName || 'You';
                // Edit field remains for Assigned Agent editing
                const agentName = ds.propertyAgent || '';
                document.getElementById('edit-agent-name').value = agentName || '';
                document.getElementById('modal-agent-initials').textContent = getInitials(addedByName || '');

                // Link
                const link = ds.propertyLink || '#';
                const linkEl = document.getElementById('modal-property-link');
                if (linkEl) {
                    linkEl.href = link || '#';
                    document.getElementById('property-link-text').textContent = link ? 'View Property Details' : 'No Link';
                }
                if (document.getElementById('edit-property-link')) {
                    document.getElementById('edit-property-link').value = link || '';
                }

                // Clear edit image input/preview when opening
                if (editImageInput) {
                    editImageInput.value = '';
                    if (editImagePreview) editImagePreview.src = '';
                    if (editImagePreviewContainer) editImagePreviewContainer.classList.add('hidden');
                }

                // Show view-mode fields and hide edit fields by default
                exitEditModeUI();

                // Show the modal
                propertyDetailsModal.classList.remove('hidden', 'opacity-0');
                propertyDetailsModal.classList.add('opacity-100');
                if (propertyDetailsBackdrop) propertyDetailsBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0.4)';
                if (propertyDetailsContent) {
                    propertyDetailsContent.classList.remove('scale-95');
                    propertyDetailsContent.classList.add('scale-100');
                }
                document.body.style.overflow = 'hidden';
            }

            function closePropertyDetailsModal() {
                if (!propertyDetailsModal) return;
                propertyDetailsModal.classList.add('opacity-0');
                propertyDetailsModal.classList.remove('opacity-100');
                if (propertyDetailsBackdrop) propertyDetailsBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0)';
                if (propertyDetailsContent) {
                    propertyDetailsContent.classList.add('scale-95');
                    propertyDetailsContent.classList.remove('scale-100');
                }
                setTimeout(function () {
                    propertyDetailsModal.classList.add('hidden');
                }, 300);
                document.body.style.overflow = '';
                // reset edit mode state
                exitEditModeUI();
            }

            function enterEditModeUI() {
                isEditMode = true;
                document.querySelectorAll('.view-mode').forEach(el => el.classList.add('hidden'));
                document.querySelectorAll('.edit-mode').forEach(el => el.classList.remove('hidden'));
                if (editModeBtn) editModeBtn.classList.add('hidden');
                if (saveChangesBtn) saveChangesBtn.classList.remove('hidden');
                if (cancelEditBtn) cancelEditBtn.classList.remove('hidden');
            }

            function exitEditModeUI() {
                isEditMode = false;
                document.querySelectorAll('.view-mode').forEach(el => el.classList.remove('hidden'));
                document.querySelectorAll('.edit-mode').forEach(el => el.classList.add('hidden'));
                if (editModeBtn) editModeBtn.classList.remove('hidden');
                if (saveChangesBtn) saveChangesBtn.classList.add('hidden');
                if (cancelEditBtn) cancelEditBtn.classList.add('hidden');
            }

            // Attach click handlers to property cards
            function wirePropertyCards() {
                const cards = Array.from(document.querySelectorAll('.property-card'));
                cards.forEach(card => {
                    // open preview on click (ignore clicks on interactive controls inside card)
                    card.addEventListener('click', function (e) {
                        // if clicking a button or link inside a card, don't open modal
                        const tag = e.target.tagName.toLowerCase();
                        if (['a','button','input','svg','path'].includes(tag)) return;
                        openPropertyDetailsModal(card);
                    });
                });
            }

            // New: edit-image preview handlers
            if (editImageInput) {
                editImageInput.addEventListener('change', function (e) {
                    const file = e.target.files && e.target.files[0];
                    if (!file) {
                        if (editImagePreview) editImagePreview.src = '';
                        if (editImagePreviewContainer) editImagePreviewContainer.classList.add('hidden');
                        return;
                    }

                    const allowed = ['image/jpeg','image/jpg','image/png','image/gif','image/bmp'];
                    if (allowed.indexOf(file.type) === -1) {
                        showToast('Please upload a valid image file (JPG, PNG, GIF, BMP).', 'error');
                        editImageInput.value = '';
                        return;
                    }
                    if (file.size > 5 * 1024 * 1024) {
                        showToast('File size cannot exceed 5MB.', 'error');
                        editImageInput.value = '';
                        return;
                    }
                    try {
                        const url = URL.createObjectURL(file);
                        if (editImagePreview) editImagePreview.src = url;
                        if (editImagePreviewContainer) editImagePreviewContainer.classList.remove('hidden');
                    } catch (err) {
                        const reader = new FileReader();
                        reader.onload = function (ev) {
                            if (editImagePreview) editImagePreview.src = ev.target.result;
                            if (editImagePreviewContainer) editImagePreviewContainer.classList.remove('hidden');
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
            if (removeEditImageBtn) {
                removeEditImageBtn.addEventListener('click', function (ev) {
                    ev.preventDefault();
                    if (editImageInput) editImageInput.value = '';
                    if (editImagePreview) editImagePreview.src = '';
                    if (editImagePreviewContainer) editImagePreviewContainer.classList.add('hidden');
                });
            }

            // Save changes (multipart POST to UpdateProperty to support image upload)
            async function savePropertyChanges() {
                const id = parseInt(document.getElementById('modal-property-id').value, 10) || 0;
                const title = document.getElementById('edit-property-name').value;
                const address = document.getElementById('edit-property-address').value;
                const description = document.getElementById('edit-property-description').value;
                const priceVal = document.getElementById('edit-property-price').value;
                const areaVal = document.getElementById('edit-property-area').value;
                const bedroomsVal = document.getElementById('edit-bedrooms').value;
                const bathroomsVal = document.getElementById('edit-bathrooms').value;
                const propertyType = document.getElementById('edit-property-type') ? document.getElementById('edit-property-type').value : null;
                const listingStatus = document.getElementById('edit-property-status') ? document.getElementById('edit-property-status').value : null;
                const propertyLink = document.getElementById('edit-property-link') ? document.getElementById('edit-property-link').value : null;
                const agent = document.getElementById('edit-agent-name') ? document.getElementById('edit-agent-name').value : null;
                const typeVal = document.getElementById('edit-property-buying-type') ? document.getElementById('edit-property-buying-type').value : null;

                // Listing date - read from datetime-local input (value like "yyyy-MM-ddTHH:mm")
                const listingDateEl = document.getElementById('edit-listing-date');
                let listingIso = null;
                if (listingDateEl && listingDateEl.value) {
                    try {
                        const dt = new Date(listingDateEl.value);
                        if (!isNaN(dt)) listingIso = dt.toISOString();
                    } catch {}
                }

                // Build FormData for multipart POST (includes file if present)
                const formData = new FormData();
                // Antiforgery token from the modal (we rendered one inside modal via @Html.AntiForgeryToken())
                const tokenInput = propertyDetailsModal ? propertyDetailsModal.querySelector('input[name="__RequestVerificationToken"]') : null;
                if (tokenInput) formData.append('__RequestVerificationToken', tokenInput.value);

                formData.append('Id', id);
                if (title !== null) formData.append('Title', title);
                if (address !== null) formData.append('Address', address);
                if (description !== null) formData.append('Description', description);
                if (priceVal) formData.append('Price', priceVal);
                if (areaVal) formData.append('Area', areaVal);
                if (bedroomsVal) formData.append('Bedrooms', bedroomsVal);
                if (bathroomsVal) formData.append('Bathrooms', bathroomsVal);
                if (propertyType !== null) formData.append('PropertyType', propertyType);
                if (typeVal !== null) formData.append('Type', typeVal);
                if (listingStatus !== null) formData.append('ListingStatus', listingStatus);
                if (listingIso) formData.append('ListingTime', listingIso);
                if (propertyLink !== null) formData.append('PropertyLink', propertyLink);
                if (agent !== null) formData.append('Agent', agent);

                // Attach file if provided
                if (editImageInput && editImageInput.files && editImageInput.files.length > 0) {
                    formData.append('ImageFile', editImageInput.files[0]);
                }

                try {
                    const res = await fetch('/Properties/UpdateProperty', {
                        method: 'POST',
                        body: formData,
                        credentials: 'same-origin'
                    });

                    if (res.ok) {
                        const data = await res.json();
                        if (data && (data.success === true || data.success == 'true')) {
                            showToast(data.message || 'Property updated', 'success');

                            // Update UI locally: reflect basic fields and new image path (if server returned it)
                            // The UpdateProperty action doesn't currently return the property; but controller sets TempData and returns Json.
                            // We'll refresh the card image if server saved and returned ImagePath via Location header or message (not available).
                            // Best-effort: if an image was uploaded, fetch the property's latest data and update UI.
                            if (editImageInput && editImageInput.files && editImageInput.files.length > 0) {
                                // fetch latest property data
                                try {
                                    const propRes = await fetch('/Properties/GetProperty?id=' + encodeURIComponent(id));
                                    if (propRes.ok) {
                                        const propData = await propRes.json();
                                        if (propData && propData.success && propData.property) {
                                            updateCardAndModalAfterSave({
                                                Id: id,
                                                Title: title,
                                                Address: address,
                                                Description: description,
                                                Price: priceVal ? Number(priceVal) : null,
                                                Area: areaVal ? Number(areaVal) : null,
                                                Bedrooms: bedroomsVal ? parseInt(bedroomsVal, 10) : null,
                                                Bathrooms: bathroomsVal ? parseInt(bathroomsVal, 10) : null,
                                                PropertyType: propertyType,
                                                ListingStatus: listingStatus,
                                                PropertyLink: propertyLink,
                                                Agent: agent,
                                                Type: typeVal,
                                                ListingTime: listingIso,
                                                imagePath: propData.property.imagePath
                                            });
                                        } else {
                                            // fallback: update card with local values and clear preview
                                            updateCardAndModalAfterSave({
                                                Id: id,
                                                Title: title,
                                                Address: address,
                                                Description: description,
                                                Price: priceVal ? Number(priceVal) : null,
                                                Area: areaVal ? Number(areaVal) : null,
                                                Bedrooms: bedroomsVal ? parseInt(bedroomsVal, 10) : null,
                                                Bathrooms: bathroomsVal ? parseInt(bathroomsVal, 10) : null,
                                                PropertyType: propertyType,
                                                ListingStatus: listingStatus,
                                                PropertyLink: propertyLink,
                                                Agent: agent,
                                                Type: typeVal,
                                                ListingTime: listingIso
                                            });
                                        }
                                    }
                                } catch (e) {
                                    // ignore fetch error; still update local card
                                    updateCardAndModalAfterSave({
                                        Id: id,
                                        Title: title,
                                        Address: address,
                                        Description: description,
                                        Price: priceVal ? Number(priceVal) : null,
                                        Area: areaVal ? Number(areaVal) : null,
                                        Bedrooms: bedroomsVal ? parseInt(bedroomsVal, 10) : null,
                                        Bathrooms: bathroomsVal ? parseInt(bathroomsVal, 10) : null,
                                        PropertyType: propertyType,
                                        ListingStatus: listingStatus,
                                        PropertyLink: propertyLink,
                                        Agent: agent,
                                        Type: typeVal,
                                        ListingTime: listingIso
                                    });
                                }
                            } else {
                                updateCardAndModalAfterSave({
                                    Id: id,
                                    Title: title,
                                    Address: address,
                                    Description: description,
                                    Price: priceVal ? Number(priceVal) : null,
                                    Area: areaVal ? Number(areaVal) : null,
                                    Bedrooms: bedroomsVal ? parseInt(bedroomsVal, 10) : null,
                                    Bathrooms: bathroomsVal ? parseInt(bathroomsVal, 10) : null,
                                    PropertyType: propertyType,
                                    ListingStatus: listingStatus,
                                    PropertyLink: propertyLink,
                                    Agent: agent,
                                    Type: typeVal,
                                    ListingTime: listingIso
                                });
                            }

                            exitEditModeUI();
                            return;
                        } else {
                            const msg = (data && data.message) ? data.message : 'Failed to update property';
                            showToast(msg, 'error');
                            exitEditModeUI();
                            return;
                        }
                    } else {
                        showToast('Server returned an error when updating property', 'error');
                        exitEditModeUI();
                        return;
                    }
                } catch (err) {
                    console.error('Save failed', err);
                    showToast('An error occurred while saving. Try again.', 'error');
                    exitEditModeUI();
                }
            }

            function updateCardAndModalAfterSave(prop) {
                // prop may be server response or the payload; normalize keys
                const id = prop.id || prop.Id || document.getElementById('modal-property-id').value;

                const title = prop.title ?? prop.Title ?? '';
                const address = prop.address ?? prop.Address ?? '';
                const description = prop.description ?? prop.Description ?? '';
                const price = prop.price ?? prop.Price ?? 0;
                const area = (prop.area ?? prop.Area) ?? 0;
                const bedrooms = (prop.bedrooms ?? prop.Bedrooms) ?? 0;
                const bathrooms = (prop.bathrooms ?? prop.Bathrooms) ?? 0;
                const propertyType = prop.propertyType ?? prop.PropertyType ?? '';
                const typeVal = prop.type ?? prop.Type ?? '';
                const listingStatus = prop.listingStatus ?? prop.ListingStatus ?? '';
                const listingTime = prop.listingTime ?? prop.ListingTime ?? null;
                const pricePerSQFT = prop.pricePerSQFT ?? prop.pricePerSqft ?? null;
                const daysOnMarket = prop.daysOnMarket ?? prop.DaysOnMarket ?? null;
                const propertyLink = prop.propertyLink ?? prop.PropertyLink ?? '';
                const agent = prop.agent ?? prop.Agent ?? '';

                // Update modal fields
                document.getElementById('modal-property-name').textContent = title;
                document.getElementById('edit-property-name').value = title;

                document.getElementById('modal-property-address').textContent = address;
                document.getElementById('edit-property-address').value = address;

                document.getElementById('modal-property-description').textContent = description;
                if (document.getElementById('edit-property-description')) document.getElementById('edit-property-description').value = description;

                document.getElementById('modal-property-price').textContent = formatCurrency(price);
                if (document.getElementById('edit-property-price')) document.getElementById('edit-property-price').value = price;

                document.getElementById('modal-area-display').textContent = area;
                if (document.getElementById('edit-property-area')) document.getElementById('edit-property-area').value = area;

                document.getElementById('modal-bedrooms').textContent = bedrooms;
                if (document.getElementById('edit-bedrooms')) document.getElementById('edit-bedrooms').value = bedrooms;

                document.getElementById('modal-bathrooms').textContent = bathrooms;
                if (document.getElementById('edit-bathrooms')) document.getElementById('edit-bathrooms').value = bathrooms;

                document.getElementById('modal-property-type').textContent = propertyType;
                if (document.getElementById('edit-property-type')) document.getElementById('edit-property-type').value = propertyType;

                document.getElementById('modal-property-buying-type').textContent = typeVal;
                if (document.getElementById('edit-property-buying-type')) document.getElementById('edit-property-buying-type').value = typeVal;

                document.getElementById('modal-property-status').textContent = listingStatus;
                if (document.getElementById('edit-property-status')) document.getElementById('edit-property-status').value = listingStatus;

                if (listingTime) {
                    try {
                        const dt = new Date(listingTime);
                        if (!isNaN(dt)) {
                            document.getElementById('modal-listing-date').textContent = dt.getFullYear();
                            if (document.getElementById('edit-listing-date')) {
                                document.getElementById('edit-listing-date').value = dt.toISOString().slice(0,16);
                            }
                        } else {
                            document.getElementById('modal-listing-date').textContent = listingTime;
                        }
                    } catch {}
                    // ensure card dataset is updated (store datetime-local friendly)
                    const card = document.querySelector(`.property-card[data-property-id="${id}"]`);
                    if (card) {
                        try {
                            const dt = new Date(listingTime);
                            if (!isNaN(dt)) {
                                card.dataset.propertyListingTime = dt.toISOString().slice(0,16);
                            } else {
                                card.dataset.propertyListingTime = listingTime;
                            }
                        } catch {}
                    }
                }

                if (pricePerSQFT != null) {
                    document.getElementById('modal-price-per-sqft').textContent = '₱ ' + Number(pricePerSQFT).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }

                if (daysOnMarket != null) {
                    document.getElementById('modal-days-on-market').textContent = daysOnMarket;
                }

                // Keep "Added by" as the current user after save
                const _meta = document.getElementById('current-user-meta');
                const _addedBy = _meta ? _meta.dataset.displayName : '';
                document.getElementById('modal-agent-name').textContent = _addedBy || 'You';
                if (document.getElementById('edit-agent-name')) document.getElementById('edit-agent-name').value = agent || '';
                document.getElementById('modal-agent-initials').textContent = getInitials(_addedBy || '');

                const linkEl = document.getElementById('modal-property-link');
                if (linkEl) {
                    linkEl.href = propertyLink || '#';
                    document.getElementById('property-link-text').textContent = propertyLink ? 'View Property Details' : 'No Link';
                }
                if (document.getElementById('edit-property-link')) document.getElementById('edit-property-link').value = propertyLink || '';

                // Update the card in list if exists
                const card = document.querySelector(`.property-card[data-property-id="${id}"]`);
                if (card) {
                    card.dataset.propertyTitle = title || card.dataset.propertyTitle;
                    card.dataset.propertyAddress = address || card.dataset.propertyAddress;
                    card.dataset.propertyDescription = description || card.dataset.propertyDescription;
                    card.dataset.propertyPrice = price ?? card.dataset.propertyPrice;
                    card.dataset.propertyAgent = agent ?? card.dataset.propertyAgent;
                    card.dataset.propertyArea = area ?? card.dataset.propertyArea;
                    card.dataset.propertyBedrooms = bedrooms ?? card.dataset.propertyBedrooms;
                    card.dataset.propertyBathrooms = bathrooms ?? card.dataset.propertyBathrooms;
                    card.dataset.propertyType = propertyType || card.dataset.propertyType;
                    card.dataset.propertyBuyingType = typeVal || card.dataset.propertyBuyingType;
                    card.dataset.propertyStatus = listingStatus || card.dataset.propertyStatus;
                    if (listingTime) card.dataset.propertyListingTime = listingTime;
                    if (pricePerSQFT != null) card.dataset.propertyPricePerSqft = pricePerSQFT;
                    if (daysOnMarket != null) card.dataset.propertyDaysMarket = daysOnMarket;
                    if (prop.imagePath) {
                        card.dataset.propertyImage = prop.imagePath;
                        const img = card.querySelector('img');
                        if (img) img.src = prop.imagePath;
                        // also update the modal main image
                        const modalImg = document.getElementById('modal-property-image');
                        if (modalImg) modalImg.src = prop.imagePath;
                    }

                    // update visible parts
                    const titleEl = card.querySelector('h3');
                    if (titleEl) titleEl.textContent = title || titleEl.textContent;
                    const addrEl = card.querySelector('p');
                    if (addrEl) addrEl.textContent = address || addrEl.textContent;
                    const priceNode = card.querySelector('.mt-auto p') || card.querySelector('.mt-auto');
                    if (priceNode) priceNode.textContent = formatCurrency(price);
                }
            }

            // Wire up property details modal buttons
            if (closePropertyDetailsBtn) closePropertyDetailsBtn.addEventListener('click', closePropertyDetailsModal);
            if (propertyDetailsBackdrop) propertyDetailsBackdrop.addEventListener('click', closePropertyDetailsModal);
            if (editModeBtn) editModeBtn.addEventListener('click', function (e) { e.preventDefault(); enterEditModeUI(); });
            if (cancelEditBtn) cancelEditBtn.addEventListener('click', function (e) {
                e.preventDefault();
                // revert edits from originalPropertyData
                if (originalPropertyData && Object.keys(originalPropertyData).length) {
                    openPropertyDetailsModal({ dataset: originalPropertyData }); // repopulates modal from saved dataset
                }
                exitEditModeUI();
            });
            if (saveChangesBtn) saveChangesBtn.addEventListener('click', function (e) { e.preventDefault(); savePropertyChanges(); });

            // Attach click handlers to property cards now
            wirePropertyCards();

            // ===============================
            // EVENT LISTENERS - MAIN AREA (modal open/close wiring)
            // ===============================
            if (addPropertyBtn) {
                addPropertyBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    openModal();
                });
            }

            if (closeModalBtn) {
                closeModalBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    closeModal();
                });
            }

            if (cancelModalBtn) {
                cancelModalBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    closeModal();
                });
            }

            if (modal) {
                modal.addEventListener('click', function (event) {
                    if (event.target === modal || event.target === modalBackdrop) {
                        closeModal();
                    }
                });
            }

            // Toggle filter panel
            const toggleFilterBtn = document.getElementById('toggle-filter');
            const filterPanel = document.getElementById('filter-panel');
            if (toggleFilterBtn && filterPanel) {
                toggleFilterBtn.addEventListener('click', function(){
                    filterPanel.classList.toggle('hidden');
                });
            }

            // Auto-submit when clearing the search box (no manual reload needed)
            (function autoSubmitOnClear(){
                const form = document.getElementById('filter-form');
                const search = document.getElementById('search-input');
                if (!form || !search) return;

                let last = (search.value || '').trim();
                function maybeSubmitOnEmpty() {
                    const now = (search.value || '').trim();
                    if (now === '' && last !== '') {
                        // Clear the query and submit to show all properties
                        search.value = '';
                        // Remove any page param so it goes back to page 1
                        const pageInput = document.createElement('input');
                        pageInput.type = 'hidden';
                        pageInput.name = 'page';
                        pageInput.value = '1';
                        form.appendChild(pageInput);
                        form.submit();
                    }
                    last = now;
                }
                // Fires when clicking the native clear (x) on type=search
                search.addEventListener('search', maybeSubmitOnEmpty);
                // Fires on typing/backspace
                search.addEventListener('input', maybeSubmitOnEmpty);
            })();

            // Other page initialization (property details modal, edit etc.) remains unchanged
            console.log('Properties page initialization complete');
        });
    </script>
}

