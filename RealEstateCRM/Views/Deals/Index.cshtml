@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = ViewData["Title"] ?? "Deals";
    var placeholder = Url.Content("~/assets/images/property-placeholder.jpg");
    var avatarPlaceholder = Url.Content("~/assets/images/avatar-placeholder.png");
    var dealsByStatus = ViewBag.DealsByStatus as Dictionary<string, List<RealEstateCRM.Models.Deal>> ?? new Dictionary<string, List<RealEstateCRM.Models.Deal>>();
    var isAllDeals = (ViewData["Title"]?.ToString() ?? "") == "All Deals";
    var allAgents = dealsByStatus.Values
        .SelectMany(l => l)
        .Select(d => d.AgentName)
        .Where(n => !string.IsNullOrWhiteSpace(n))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(n => n)
        .ToList();
}

<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-6">
    <h1 class="font-semibold text-2xl">@ViewData["Title"]</h1>
    <div class="flex items-center gap-3">
        @if (isAllDeals && allAgents.Any())
        {
            <div class="flex items-center gap-2">
                <label for="agent-filter" class="text-sm text-gray-700">Filter by Agent</label>
                <select id="agent-filter" class="text-sm border border-gray-300 rounded-md px-2 py-1">
                    <option value="__ALL__">All Agents</option>
                    @foreach (var a in allAgents)
                    {
                        <option value="@a">@a</option>
                    }
                </select>
            </div>
        }
        <button id="add-deal-btn" class="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition @(isAllDeals ? "hidden" : "")">
            Add Deal
        </button>
    </div>
</div>

<!-- Success/Error Toast Notification -->
<div id="toast-notification" class="fixed top-4 right-4 z-[10000] transform translate-x-full transition-transform duration-300 ease-in-out">
    <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 min-w-[300px]">
        <div class="flex items-center gap-3">
            <div id="toast-icon" class="flex-shrink-0">
                <!-- Success icon -->
                <svg id="toast-success-icon" class="h-6 w-6 text-green-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <!-- Error icon -->
                <svg id="toast-error-icon" class="h-6 w-6 text-red-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div class="flex-1">
                <p id="toast-message" class="text-sm font-medium text-gray-900"></p>
            </div>
            <button id="toast-close" class="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Deals Pipeline -->
<div id="deals-pipeline" class="flex flex-nowrap items-start gap-5 overflow-x-auto min-h-[600px]" style="display:grid;grid-auto-flow:column;grid-auto-columns:18rem;gap:20px;align-items:start;">
    <!-- Column: New -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-rose-200 text-rose-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="New" title="Double-click to rename">
            <span class="column-title" data-status="New">New</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("New") ? dealsByStatus["New"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="New">
            @if (dealsByStatus.ContainsKey("New"))
            {
                @foreach (var deal in dealsByStatus["New"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName" data-price="@(deal.Property?.Price ?? 0)">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">₱ @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        else if (deal.Property != null)
                        {
                            <p class="text-sm font-semibold text-gray-800 mt-2">List Price: ₱ @deal.Property.Price.ToString("N0")</p>
                        }
                        else if (deal.Property != null)
                        {
                            <p class="text-sm font-semibold text-gray-800 mt-2">List Price: ₱ @deal.Property.Price.ToString("N0")</p>
                        }
                        else if (deal.Property != null)
                        {
                            <p class="text-sm font-semibold text-gray-800 mt-2">List Price: ₱ @deal.Property.Price.ToString("N0")</p>
                        }
                        else if (deal.Property != null)
                        {
                            <p class="text-sm font-semibold text-gray-800 mt-2">List Price: ₱ @deal.Property.Price.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Offer Made -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-lime-200 text-lime-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="OfferMade" title="Double-click to rename">
            <span class="column-title" data-status="OfferMade">Offer Made</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("OfferMade") ? dealsByStatus["OfferMade"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="OfferMade">
            @if (dealsByStatus.ContainsKey("OfferMade"))
            {
                @foreach (var deal in dealsByStatus["OfferMade"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">₱ @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Negotiation -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-yellow-200 text-yellow-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="Negotiation" title="Double-click to rename">
            <span class="column-title" data-status="Negotiation">Negotiation</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("Negotiation") ? dealsByStatus["Negotiation"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="Negotiation">
            @if (dealsByStatus.ContainsKey("Negotiation"))
            {
                @foreach (var deal in dealsByStatus["Negotiation"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName" data-price="@(deal.Property?.Price ?? 0)">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">₱ @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                            <div class="flex justify-end gap-2 pt-1">
                                <button type="button" class="px-2 py-1 text-xs rounded border deal-offer-btn" data-deal-id="@deal.Id" data-price="@(deal.Property?.Price ?? 0)">Set Offer</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Contract Draft -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-emerald-200 text-emerald-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="ContractDraft" title="Double-click to rename">
            <span class="column-title" data-status="ContractDraft">Contract Draft</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("ContractDraft") ? dealsByStatus["ContractDraft"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="ContractDraft">
            @if (dealsByStatus.ContainsKey("ContractDraft"))
            {
                @foreach (var deal in dealsByStatus["ContractDraft"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">₱ @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    <!-- Column: Under Contract -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-emerald-200 text-emerald-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="UnderContract" title="Double-click to rename">
            <span class="column-title" data-status="UnderContract">Under Contract</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("UnderContract") ? dealsByStatus["UnderContract"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="UnderContract">
            @if (dealsByStatus.ContainsKey("UnderContract"))
            {
                @foreach (var deal in dealsByStatus["UnderContract"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">₱ @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        else if (deal.Property != null)
                        {
                            <p class="text-sm font-semibold text-gray-800 mt-2">List Price: ₱ @deal.Property.Price.ToString("N0")</p>
                        }
                        @* Deadlines placeholder for Under Contract summary *@
                        <div class="mt-2" data-deadlines="@deal.Id"></div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Clear To Close -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-green-200 text-green-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="ClearToClose" title="Double-click to rename">
            <span class="column-title" data-status="ClearToClose">Clear To Close</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("ClearToClose") ? dealsByStatus["ClearToClose"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="ClearToClose">
            @if (dealsByStatus.ContainsKey("ClearToClose"))
            {
                @foreach (var deal in dealsByStatus["ClearToClose"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        <h4 class="font-bold text-sm">@deal.Title</h4>
                        @if (deal.Property != null)
                        {
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Title</p>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Closed -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-slate-200 text-slate-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="Closed" title="Double-click to rename">
            <span class="column-title" data-status="Closed">Closed</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("Closed") ? dealsByStatus["Closed"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="Closed">
            @if (dealsByStatus.ContainsKey("Closed"))
            {
                @foreach (var deal in dealsByStatus["Closed"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        <h4 class="font-bold text-sm">@deal.Title</h4>
                        @if (deal.Property != null)
                        {
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Title</p>
                        }
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">₱ @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Fell Through -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-gray-200 text-gray-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="FellThrough" title="Double-click to rename">
            <span class="column-title" data-status="FellThrough">Fell Through</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("FellThrough") ? dealsByStatus["FellThrough"].Count : 0))</span>
            
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="FellThrough">
            @if (dealsByStatus.ContainsKey("FellThrough"))
            {
                @foreach (var deal in dealsByStatus["FellThrough"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        <h4 class="font-bold text-sm">@deal.Title</h4>
                        @if (deal.Property != null)
                        {
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Title</p>
                        }
                    </div>
                }
            }
        </div>
</div>

<!-- Edit Offer Modal -->
<div id="offer-modal" class="fixed inset-0 z-[10001] hidden">
    <div class="absolute inset-0 bg-black/30" id="offer-modal-backdrop"></div>
    <div class="absolute inset-0 flex items-center justify-center p-4" id="offer-modal-overlay">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="px-4 py-3 border-b flex items-center justify-between">
                <h3 class="font-semibold text-gray-900">Set Offer Amount</h3>
                <button id="offer-close" class="text-gray-500 hover:text-gray-700" aria-label="Close">&times;</button>
            </div>
            <div class="p-4">
                <form id="offer-form" class="space-y-4">
                    <input type="hidden" id="offer-deal-id" />
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="offer-input">Offer Amount</label>
                        <input id="offer-input" type="number" step="0.01" class="w-full border rounded-md px-3 py-2" />
                        <p id="offer-hint" class="text-xs text-gray-500 mt-1"></p>
                    </div>
                    <div id="offer-list" class="mt-3 hidden">
                        <div class="text-sm font-medium text-gray-900 mb-2">Existing Offers</div>
                        <ul id="offer-items" class="divide-y divide-gray-100 text-sm"></ul>
                    </div>
                    <div class="flex justify-end gap-2 pt-2">
                        <button type="button" id="offer-cancel" class="px-3 py-2 rounded-md border">Cancel</button>
                        <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white">Save Offer</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        (function(){
            const modal = document.getElementById('offer-modal');
            const closeBtn = document.getElementById('offer-close');
            const cancelBtn = document.getElementById('offer-cancel');
            const form = document.getElementById('offer-form');
            const dealIdEl = document.getElementById('offer-deal-id');
            const inputEl = document.getElementById('offer-input');
            const hintEl = document.getElementById('offer-hint');
            const listWrap = document.getElementById('offer-list');
            const listEl = document.getElementById('offer-items');
            const financingEl = document.getElementById('offer-financing');
            const earnestEl = document.getElementById('offer-earnest');
            const closeDateEl = document.getElementById('offer-close-date');
            const notesEl = document.getElementById('offer-notes');

            function setHint(text, isError){
                hintEl.textContent = text || '';
                hintEl.classList.toggle('text-red-600', !!isError);
                hintEl.classList.toggle('text-gray-500', !isError);
            }

            function renderOffers(items){
                if (!items || !items.length){ listWrap.classList.add('hidden'); listEl.innerHTML=''; return; }
                listWrap.classList.remove('hidden');
                listEl.innerHTML = items.map(o => `
                    <li class="py-2 flex justify-between items-center">
                        <div>
                            <div class="font-medium">₱ ${Number(o.amount).toLocaleString()} <span class="text-xs text-gray-500">(${o.status})</span></div>
                            ${o.financingType ? `<div class='text-xs text-gray-500'>${o.financingType}</div>` : ''}
                            ${o.earnestMoney ? `<div class='text-xs text-gray-500'>Earnest: ₱ ${Number(o.earnestMoney).toLocaleString()}</div>` : ''}
                            ${o.closeDate ? `<div class='text-xs text-gray-500'>Close: ${new Date(o.closeDate).toLocaleDateString()}</div>` : ''}
                        </div>
                        <div class="flex gap-2">
                            ${o.status === 'Proposed' ? `<button type='button' data-accept='${o.id}' class='px-2 py-1 text-xs rounded border'>Accept</button>` : ''}
                            ${o.status === 'Proposed' ? `<button type='button' data-decline='${o.id}' class='px-2 py-1 text-xs rounded border'>Decline</button>` : ''}
                        </div>
                    </li>
                `).join('');
                listEl.querySelectorAll('[data-accept]').forEach(b => b.addEventListener('click', function(){
                    const oid = this.getAttribute('data-accept');
                    fetch('/Deals/AcceptOffer', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`offerId=${encodeURIComponent(oid)}` })
                        .then(r=>{ if(!r.ok) return r.text().then(t=>{throw new Error(t)}); })
                        .then(()=>{ try{ showToast('Offer accepted','success'); }catch(e){} location.reload(); })
                        .catch(err=>alert(err.message||'Failed'));
                }));
                listEl.querySelectorAll('[data-decline]').forEach(b => b.addEventListener('click', function(){
                    const oid = this.getAttribute('data-decline');
                    fetch('/Deals/DeclineOffer', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`offerId=${encodeURIComponent(oid)}` })
                        .then(r=>{ if(!r.ok) return r.text().then(t=>{throw new Error(t)}); })
                        .then(()=>{ try{ showToast('Offer declined','success'); }catch(e){} location.reload(); })
                        .catch(err=>alert(err.message||'Failed'));
                }));
            }

            function open(id, price){
                dealIdEl.value = String(id);
                // Set min/max based on property price (10% below to 100%)
                const max = Number(price || 0);
                const min = Math.round(max * 0.9 * 100) / 100;
                if (max > 0){
                    inputEl.min = String(min);
                    inputEl.max = String(max);
                    setHint(`Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}` , false);
                } else {
                    inputEl.removeAttribute('min');
                    inputEl.removeAttribute('max');
                    setHint('', false);
                }
                inputEl.value = '';
                fetch(`/Deals/GetOffers?dealId=${encodeURIComponent(id)}`).then(r=>r.json()).then(renderOffers).catch(()=>{ listWrap.classList.add('hidden'); });
                modal.classList.remove('hidden');
            }
            function close(){ modal.classList.add('hidden'); }

            window.openOfferModal = open;
            closeBtn.addEventListener('click', close);
            cancelBtn.addEventListener('click', close);
            document.getElementById('offer-modal-backdrop').addEventListener('click', close);
            const offerOverlay = document.getElementById('offer-modal-overlay');
            if (offerOverlay) offerOverlay.addEventListener('click', function(e){ if (e.target === offerOverlay) close(); });

            function validate(){
                const raw = (inputEl.value || '').trim();
                const min = parseFloat(inputEl.min || '0');
                const max = parseFloat(inputEl.max || '0');

                if (raw === ''){
                    inputEl.classList.add('border-red-500','focus:ring-red-400');
                    setHint('Please enter an offer amount.', true);
                    return false;
                }
                const val = parseFloat(raw);
                if (isNaN(val)){
                    inputEl.classList.add('border-red-500','focus:ring-red-400');
                    setHint('Enter a valid number.', true);
                    return false;
                }
                if (!isNaN(min) && val < min){
                    inputEl.classList.add('border-red-500','focus:ring-red-400');
                    setHint(`Minimum required offer: ${min.toLocaleString()}`, true);
                    return false;
                }
                if (!isNaN(max) && val > max){
                    inputEl.classList.add('border-red-500','focus:ring-red-400');
                    setHint(`Maximum allowed offer: ${max.toLocaleString()}`, true);
                    return false;
                }
                inputEl.classList.remove('border-red-500','focus:ring-red-400');
                setHint(`Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}`, false);
                return true;
            }

            inputEl.addEventListener('input', validate);

            form.addEventListener('submit', function(ev){
                ev.preventDefault();
                if (!validate()) return; // Block submit if invalid
                const id = dealIdEl.value; const amount = inputEl.value;
                const financing = (financingEl && financingEl.value ? financingEl.value : '').trim();
                const earnest = (earnestEl && earnestEl.value ? earnestEl.value : '').trim();
                const closeDate = (closeDateEl && closeDateEl.value ? closeDateEl.value : '').trim();
                const notes = (notesEl && notesEl.value ? notesEl.value : '').trim();
                const body = `dealId=${encodeURIComponent(id)}&amount=${encodeURIComponent(amount)}&financingType=${encodeURIComponent(financing)}&earnestMoney=${encodeURIComponent(earnest)}&closeDate=${encodeURIComponent(closeDate)}&notes=${encodeURIComponent(notes)}`;
                fetch('/Deals/CreateOffer', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body })
                    .then(async r=>{ if(!r.ok){ const t = await r.text(); setHint(t||'Failed to save offer', true); throw new Error(t||'Failed'); } })
                    .then(()=>{
                        try{ showToast('Offer saved','success'); } catch(e){}
                        // Close modal and move card to Contract Draft immediately without full reload
                        try { close(); } catch {}
                        try {
                            const card = document.querySelector(`.deal-card[data-deal-id=\"${id}\"]`);
                            const target = document.querySelector('.deal-cards[data-stage=\"ContractDraft\"]');
                            if (card && target) {
                                // Update offer attribute for sums
                                card.setAttribute('data-offer', String(amount));
                                // Remove any offer button row (not applicable outside Negotiation)
                                const btn = card.querySelector('.deal-offer-btn');
                                if (btn) { const row = btn.closest('div'); if (row) row.remove(); }
                                target.appendChild(card);
                                try { refreshCounts(); } catch {}
                                try { updateOfferButtons && updateOfferButtons(); } catch {}
                            }
                        } catch {}
                    })
                    .catch(()=>{});
            });

            // Disabled: offers are only set in Negotiation
        })();
    </script>
</div>

<!-- View Deal Modal (read-only) -->
<div id="deal-view-modal" class="fixed inset-0 z-[10002] hidden">
    <div class="absolute inset-0 bg-black/30" id="deal-view-backdrop"></div>
    <div class="absolute inset-0 flex items-center justify-center p-4" id="deal-view-overlay">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-3xl overflow-hidden">
            <div class="px-5 py-3 border-b flex items-center justify-between">
                <h3 class="font-semibold text-gray-900" id="deal-view-title">Deal Details</h3>
                <button id="deal-view-close" class="text-gray-500 hover:text-gray-700" aria-label="Close">&times;</button>
            </div>
            <div class="p-5" id="deal-view-body">
                <!-- populated by JS -->
            </div>
        </div>
    </div>
    <script>
        (function(){
            const modal = document.getElementById('deal-view-modal');
            const closeBtn = document.getElementById('deal-view-close');
            const backdrop = document.getElementById('deal-view-backdrop');
            const overlay = document.getElementById('deal-view-overlay');
            const titleEl = document.getElementById('deal-view-title');
            const bodyEl = document.getElementById('deal-view-body');

            function open(){ modal.classList.remove('hidden'); }
            function close(){ modal.classList.add('hidden'); }

            function fmtCurrency(v){ try { return Number(v||0).toLocaleString(); } catch { return v; } }

            async function openWithId(id){
                try {
                    const res = await fetch(`/Deals/DealSummary?id=${encodeURIComponent(id)}`);
                    if (!res.ok) throw new Error('Failed to load deal');
                    const d = await res.json();
                    titleEl.textContent = d.title || d.dealTitle || 'Deal Details';

                    const img = d.property?.image || '/assets/images/property-placeholder.jpg';
                    const priceLine = d.offer ? `₱ ${fmtCurrency(d.offer)}` : (d.property?.price ? `List Price: ₱ ${fmtCurrency(d.property.price)}` : '-');
                    const specs = d.property ? `${d.property.bedrooms} bed • ${d.property.bathrooms} bath • ${d.property.area} sqm` : '';

                    bodyEl.innerHTML = `
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                            <div>
                                <img src="${img}" alt="property" class="w-full h-48 object-cover rounded border"/>
                                ${d.property?.address ? `<p class='text-sm text-gray-600 mt-2'>${d.property.address}</p>` : ''}
                            </div>
                            <div class="space-y-2">
                                ${d.dealTitle ? `<div class='text-sm text-gray-500'>Deal Title</div><div class='font-medium'>${d.dealTitle}</div>` : ''}
                                <div class='text-sm text-gray-500'>Status</div>
                                <div class='font-medium'>${d.status || '-'}</div>
                                <div class='text-sm text-gray-500'>Price</div>
                                <div class='font-semibold ${d.offer ? 'text-green-600' : 'text-gray-900'}'>${priceLine}</div>
                                <div class='text-sm text-gray-500'>Agent</div>
                                <div class='font-medium'>${d.agent || '-'}</div>
                                <div class='text-sm text-gray-500'>Client</div>
                                <div class='font-medium'>${d.client || '-'}</div>
                                ${specs ? `<div class='text-sm text-gray-500'>Specs</div><div class='font-medium'>${specs}</div>` : ''}
                                ${d.description ? `<div class='text-sm text-gray-500'>Notes</div><div class='text-sm'>${d.description}</div>` : ''}
                                <div class='text-xs text-gray-400 pt-2'>Updated: ${d.updated ? new Date(d.updated).toLocaleString() : '-'}</div>
                            </div>
                        </div>
                        <div class="mt-6">
                            <div class='text-sm font-semibold text-gray-900 mb-2'>Deadlines</div>
                            <div id="deadline-editor" data-deal-id="${d.id}" class="space-y-2">
                                <div class="text-xs text-gray-500">Loading deadlines…</div>
                            </div>
                            <div class="flex items-center justify-end gap-2 mt-4">
                                <button id="deadline-cancel" class="px-3 py-1.5 text-sm border rounded">Cancel</button>
                                <button id="deadline-save" class="px-3 py-1.5 text-sm bg-blue-600 text-white rounded">Save</button>
                            </div>
                        </div>`;
                    open();
                    try { await loadAndRenderDeadlineEditor(d.id); } catch {}
                    try {
                        document.getElementById('deadline-cancel')?.addEventListener('click', close);
                        document.getElementById('deadline-save')?.addEventListener('click', async function(){
                            const payload = collectDeadlineEditorPayload();
                            if (!payload) return;
                            const ok = await saveDeadlineEdits(payload);
                            if (ok) {
                                try { showToast('Deadlines saved', 'success'); } catch {}
                                try { if (window.loadDeadlines) window.loadDeadlines(); } catch {}
                                close();
                            } else {
                                alert('Failed to save deadlines');
                            }
                        });
                    } catch {}
                } catch (e) {
                    bodyEl.innerHTML = '<div class="text-red-600">Failed to load deal details.</div>';
                    open();
                }
            }

            window.openDealViewModal = openWithId;
            closeBtn.addEventListener('click', close);
            backdrop.addEventListener('click', close);
            if (overlay) overlay.addEventListener('click', function(e){ if (e.target === overlay) close(); });
        })();
    </script>
    <script>
        // Utilities for deadline editor inside the Deal View modal
        async function loadAndRenderDeadlineEditor(dealId){
            const host = document.getElementById('deadline-editor');
            if (!host) return;
            const res = await fetch(`/Deals/GetDeadlines?dealId=${encodeURIComponent(dealId)}`);
            const items = res.ok ? await res.json() : [];
            const byType = (name)=> items.find(x => (x.type||x.Type) === name);

            const types = [
                { key:'Inspection', label:'Inspection' },
                { key:'Appraisal', label:'Appraisal' },
                { key:'LoanCommitment', label:'Loan Commitment' },
                { key:'Closing', label:'Closing' }
            ];

            const row = (t, itm) => {
                const id = itm?.id ?? itm?.Id ?? '';
                const due = itm?.dueDate ?? itm?.DueDate ?? null;
                let val = '';
                if (due) {
                    const dt = new Date(due);
                    // to yyyy-MM-ddTHH:mm
                    const pad=(n)=> (n<10?('0'+n):''+n);
                    val = `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}T${pad(dt.getHours())}:${pad(dt.getMinutes())}`;
                }
                return `
                <div class="flex items-center gap-3">
                    <div class="w-40 text-sm text-gray-700">${t.label}</div>
                    <input type="hidden" name="id" value="${id}">
                    <input type="hidden" name="type" value="${t.key}">
                    <input type="datetime-local" name="due" value="${val}" class="border rounded px-2 py-1 text-sm">
                    <input type="text" name="notes" value="${itm?.notes ?? itm?.Notes ?? ''}" placeholder="Notes (optional)" class="flex-1 border rounded px-2 py-1 text-sm">
                </div>`;
            };

            host.innerHTML = types.map(t => row(t, byType(t.key))).join('');
        }

        function collectDeadlineEditorPayload(){
            const host = document.getElementById('deadline-editor');
            if (!host) return null;
            const dealId = Number(host.getAttribute('data-deal-id'));
            const rows = Array.from(host.querySelectorAll('div.flex.items-center'));
            const deadlines = rows.map(r => {
                const id = r.querySelector('input[name="id"]').value.trim();
                const type = r.querySelector('input[name="type"]').value.trim();
                const due = r.querySelector('input[name="due"]').value; // yyyy-MM-ddTHH:mm
                const notes = r.querySelector('input[name="notes"]').value;
                if (!due) return null; // skip empty
                const dueDate = new Date(due);
                return {
                    id: id ? Number(id) : null,
                    type,
                    dueDate: dueDate.toISOString(),
                    notes: notes || null
                };
            }).filter(Boolean);
            return { dealId, deadlines };
        }

        async function saveDeadlineEdits(payload){
            try {
                const res = await fetch('/Deals/SaveDeadlines', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                return res.ok;
            } catch { return false; }
        }
    </script>
</div>

<!-- Add Deal Modal -->
<div id="add-deal-modal" class="fixed inset-0 z-[9999] hidden opacity-0 transition-opacity duration-300 ease-out" style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
    <!-- Background overlay -->
    <div class="absolute inset-0 transition-all duration-300 ease-out" id="deal-modal-backdrop" style="background-color: rgba(29, 29, 29, 0); transition: background-color 300ms ease-out;"></div>

    <!-- Modal content container -->
    <div class="relative h-full w-full flex items-center justify-center p-4" id="deal-modal-overlay">
        <!-- Modal dialog -->
        <div class="relative bg-white rounded-lg shadow-xl w-[900px] max-h-[90vh] overflow-hidden transform scale-95 transition-transform duration-300 ease-out" id="deal-modal-content">
            <!-- Close button -->
            <div class="absolute top-4 right-4 z-10">
                <button id="close-deal-modal-btn" class="text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600 transition-colors duration-200" aria-label="Close">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- Modal content -->
            <div class="overflow-y-auto max-h-[90vh]">
                <div class="p-8">
                    <h3 class="text-xl font-semibold text-gray-900 text-center mb-6">Add New Deal</h3>

                    <!-- Step 1: Select Property -->
                    <div id="property-selection-step">
                        <h4 class="text-lg font-medium text-gray-900 mb-4">Select a Property</h4>
                        
                        <!-- Search properties -->
                        <div class="mb-4">
                            <input type="text" id="property-search" placeholder="Search properties..." 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                        </div>

                        <!-- Properties grid -->
                        <div id="properties-grid" class="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-60 overflow-y-auto">
                            <!-- Properties will be loaded here via JavaScript -->
                        </div>

                        <div class="flex justify-end mt-6">
                            <button id="next-step-btn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                                Next
                            </button>
                        </div>
                    </div>

                    <!-- Step 2: Deal Details -->
                    <div id="deal-details-step" class="hidden">
                        <h4 class="text-lg font-medium text-gray-900 mb-4">Deal Details</h4>
                        
                        <!-- Selected property preview -->
                        <div id="selected-property-preview" class="bg-gray-50 p-4 rounded-lg mb-6">
                            <!-- Property details will be shown here -->
                        </div>

                        <form asp-controller="Deals" asp-action="CreateDeal" method="post" id="deal-form" class="space-y-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="selected-property-id" name="PropertyId" />

                            <!-- Deal Title -->
                            <div>
                                <label for="deal-title" class="block text-sm font-medium text-gray-700 mb-1">
                                    Deal Title <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="deal-title" name="Title" required 
                                       placeholder="e.g., John Doe - Property Purchase"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                            </div>

                            <!-- Description -->
                            <div>
                                <label for="deal-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                <textarea id="deal-description" name="Description" rows="3" 
                                          placeholder="Additional details about this deal..."
                                          class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 resize-none"></textarea>
                            </div>

                            <!-- Agent and Client in two columns -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <!-- Agent Name (populated from users in Agent role) -->
                                <div>
                                    <label for="agent-name" class="block text-sm font-medium text-gray-700 mb-1">Agent Name</label>
                                    <select id="agent-name" name="AgentName"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                                        <option value="">-- Select an agent (optional) --</option>
                                    </select>
                                </div>

                                <!-- Client Name (populated from Contacts table) -->
                                <div>
                                    <label for="client-name" class="block text-sm font-medium text-gray-700 mb-1">Client Name <span class="text-red-500">*</span></label>
                                    <select id="client-name" name="ClientName" required
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                                        <option value="">-- Select a client --</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Offer Amount -->
                            <div>
                                <label for="offer-amount" class="block text-sm font-medium text-gray-700 mb-1">Offer Amount (?)</label>
                                <input type="number" id="offer-amount" name="OfferAmount" min="0" step="0.01"
                                       placeholder="e.g., 4,500,000 (leave blank if none)"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                                <p id="offer-amount-hint" class="mt-1 text-xs text-gray-500"></p>
                            </div>

                            <div class="flex gap-3 pt-6">
                                <button type="button" id="back-step-btn" class="flex-1 px-4 py-2 bg-gray-200 text-gray-800 text-base font-medium rounded-lg hover:bg-gray-300">
                                    Back
                                </button>
                                <button type="submit" class="flex-1 px-4 py-2 bg-blue-600 text-white text-base font-medium rounded-lg hover:bg-blue-700">
                                    Create Deal
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const IS_ALL_DEALS = @(isAllDeals.ToString().ToLower());
            // ===============================
            // TOAST NOTIFICATION SYSTEM
            // ===============================
            
            // Enhanced Toast notification system
            function showToast(message, type = 'success') {
                const toast = document.getElementById('toast-notification');
                const messageEl = document.getElementById('toast-message');
                const successIcon = document.getElementById('toast-success-icon');
                const errorIcon = document.getElementById('toast-error-icon');

                // Set message
                messageEl.textContent = message;

                // Show appropriate icon
                if (type === 'success') {
                    successIcon.classList.remove('hidden');
                    errorIcon.classList.add('hidden');
                } else {
                    successIcon.classList.add('hidden');
                    errorIcon.classList.remove('hidden');
                }

                // Show toast
                toast.classList.remove('translate-x-full');
                toast.classList.add('translate-x-0');

                // Auto hide after 3 seconds
                setTimeout(() => {
                    hideToast();
                }, 3000);
            }

            function hideToast() {
                const toast = document.getElementById('toast-notification');
                toast.classList.remove('translate-x-0');
                toast.classList.add('translate-x-full');
            }

            // Toast close button
            document.getElementById('toast-close').addEventListener('click', hideToast);

            // Check for success message from TempData
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showToast('@Html.Raw(TempData["SuccessMessage"])', 'success');
                </text>
            }
            // Check for error message from TempData
            @if (TempData["ErrorMessage"] != null)
            {
                <text>
                showToast('@Html.Raw(TempData["ErrorMessage"])', 'error');
                </text>
            }

            // ----- Column name persistence (localStorage) -----
            const defaultColumnNames = {
                New: 'New',
                OfferMade: 'Offer Made',
                Negotiation: 'Negotiation',
                ContractDraft: 'Contract Draft',
                UnderContract: 'Under Contract',
                ClearToClose: 'Clear To Close',
                FellThrough: 'Fell Through',
                Closed: 'Closed'
            };

            function getStoredNames() {
                try {
                    const raw = localStorage.getItem('dealColumnNames');
                    return raw ? { ...defaultColumnNames, ...JSON.parse(raw) } : { ...defaultColumnNames };
                } catch { return { ...defaultColumnNames }; }
            }
            function saveStoredNames(names) {
                localStorage.setItem('dealColumnNames', JSON.stringify(names));
            }

            const names = getStoredNames();

            // Apply stored names to headers
            document.querySelectorAll('.column-title').forEach(span => {
                const status = span.dataset.status;
                if (names[status]) span.textContent = names[status];
            });

            // Inline rename: double-click header OR click ?? button
            function beginRename(headerEl) {
                const titleSpan = headerEl.querySelector('.column-title');
                const status = titleSpan.dataset.status;
                const current = titleSpan.textContent;

                // Create input
                const input = document.createElement('input');
                input.type = 'text';
                input.value = current;
                input.className = 'ml-[-2px] px-1 py-0.5 rounded border border-gray-300 text-sm';
                input.style.minWidth = '140px';

                // Replace span with input temporarily
                titleSpan.replaceWith(input);
                input.focus();
                input.select();

                function commit(save) {
                    const newValue = (save ? input.value.trim() : current) || defaultColumnNames[status];
                    names[status] = newValue;
                    saveStoredNames(names);

                    const newSpan = document.createElement('span');
                    newSpan.className = 'column-title';
                    newSpan.dataset.status = status;
                    newSpan.textContent = newValue;

                    input.replaceWith(newSpan);
                }

                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') commit(true);
                    if (e.key === 'Escape') commit(false);
                });
                input.addEventListener('blur', () => commit(true));
            }

            // Wire events (disabled on All Deals overview)
            if (!IS_ALL_DEALS) {
                document.querySelectorAll('.editable-column-header').forEach(header => {
                    header.addEventListener('dblclick', () => beginRename(header));
                    const btn = header.querySelector('.edit-title-btn');
                    if (btn) btn.addEventListener('click', (e) => { e.stopPropagation(); beginRename(header); });
                });
            }

            // ----- Drag-n-drop (existing) + live count update -----
            const pipelines = document.querySelectorAll('.deal-cards');
            const isAllDeals = @(isAllDeals.ToString().ToLower());
            function refreshCounts() {
                document.querySelectorAll('.editable-column-header').forEach(h => {
                    const status = h.dataset.status;
                    const list = document.querySelector(`.deal-cards[data-stage="${status}"]`);
                    const countEl = h.querySelector('.column-count');
                    if (list && countEl) {
                        const visibleCount = isAllDeals
                            ? Array.from(list.children).filter(el => !el.classList.contains('hidden')).length
                            : list.children.length;
                        countEl.textContent = `(${visibleCount})`;
                    }
                });
            }

            // Enable drag-and-drop when not viewing All Deals, with rules:
            // - From New: can drop only to OfferMade or Negotiation
            // - To UnderContract: only allowed when dragging from ContractDraft
            if (!isAllDeals) {
                pipelines.forEach(column => {
                    new Sortable(column, {
                        group: 'deals',
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        dragClass: 'sortable-drag',
                        onEnd: function (evt) {
                            const dealId = evt.item.dataset.dealId;
                            const fromStatus = evt.from.dataset.stage;
                            const newStatus = evt.to.dataset.stage;

                            let valid = true;
                            if (fromStatus === 'New' && !(newStatus === 'OfferMade' || newStatus === 'Negotiation')) valid = false;
                            if (fromStatus === 'Negotiation' && !(newStatus === 'Negotiation' || newStatus === 'OfferMade')) valid = false;
                            if (newStatus === 'UnderContract' && fromStatus !== 'ContractDraft') valid = false;

                            if (!valid) {
                                try { evt.from.insertBefore(evt.item, evt.from.children[evt.oldIndex]); } catch {}
                                try { showToast('Move not allowed for this stage', 'error'); } catch {}
                                return;
                            }

                            // Ask for confirmation when moving Contract Draft -> Under Contract
                            if (fromStatus === 'ContractDraft' && newStatus === 'UnderContract') {
                                const ok = window.confirm('Move deal to Under Contract? This will initialize deadlines and start the closing timeline.');
                                if (!ok) {
                                    try { evt.from.insertBefore(evt.item, evt.from.children[evt.oldIndex]); } catch {}
                                    return;
                                }
                            }

                            fetch('/Deals/MoveDeal', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                                body: `dealId=${dealId}&newStatus=${newStatus}`
                            }).then(response => {
                                if (!response.ok) {
                                    console.error('Failed to move deal');
                                    location.reload();
                                } else {
                                    refreshCounts();
                                    try { updateOfferButtons(); } catch {}
                                }
                            }).catch(() => { try { refreshCounts(); updateOfferButtons(); } catch {} });
                        }
                    });
                });
            }

            // Initial count sync (in case client moves later)
            refreshCounts();

            // ----- Load deadlines for Under Contract cards -----
            function loadDeadlines(){
                const nodes = document.querySelectorAll('[data-deadlines]');
                nodes.forEach(el => {
                    const id = el.getAttribute('data-deadlines');
                    fetch(`/Deals/GetDeadlines?dealId=${encodeURIComponent(id)}`)
                        .then(r => r.ok ? r.json() : [])
                        .then(items => {
                            if (!items || !items.length){ el.innerHTML = ''; return; }
                            const today = new Date();
                            el.innerHTML = `<div class="text-xs text-gray-500 mb-1">Deadlines</div>` +
                                '<div class="flex flex-wrap gap-1">' + items.map(d => {
                                    const due = new Date(d.dueDate);
                                    const done = !!d.completedAtUtc;
                                    const overdue = !done && due < new Date(today.getFullYear(), today.getMonth(), today.getDate());
                                    const cls = done ? 'bg-emerald-100 text-emerald-700' : (overdue ? 'bg-red-100 text-red-700' : 'bg-amber-100 text-amber-800');
                                    return `<span class="px-2 py-0.5 rounded ${cls} text-[11px]">${d.type}: ${due.toLocaleDateString()}</span>`;
                                }).join('') + '</div>';
                        })
                        .catch(()=>{ el.innerHTML=''; });
                });
            }
            // expose for external refresh after edits
            try { window.loadDeadlines = loadDeadlines; } catch {}
            loadDeadlines();

            // Inject Close buttons into Under Contract and Clear To Close
            document.querySelectorAll('.deal-cards[data-stage="UnderContract"], .deal-cards[data-stage="ClearToClose"]').forEach(list => {
                list.querySelectorAll('.deal-card').forEach(card => {
                    if (card.querySelector('.close-deal')) return;
                    const btnRow = document.createElement('div');
                    btnRow.className = 'flex justify-end gap-2 pt-2';
                    btnRow.innerHTML = `<button class="px-2 py-1 text-xs rounded border close-deal">Close</button>`;
                    card.appendChild(btnRow);
                });
            });

            function wireCloseArchiveButtons(){
                document.querySelectorAll('.close-deal').forEach(b => {
                    if (b._wired) return; b._wired = true;
                    b.addEventListener('click', function(){
                        const id = this.closest('.deal-card').getAttribute('data-deal-id');
                        fetch('/Deals/CloseDeal', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`dealId=${encodeURIComponent(id)}` })
                            .then(r=>{ if(!r.ok) throw new Error('Failed to close'); })
                            .then(()=>{ try{ showToast('Deal closed','success'); }catch(e){} location.reload(); })
                            .catch(()=>alert('Failed to close'));
                    });
                });
            }
            wireCloseArchiveButtons();

            // Agent filter for All Deals
            if (isAllDeals) {
                const agentFilter = document.getElementById('agent-filter');
                const applyFilter = () => {
                    const sel = agentFilter ? agentFilter.value : '__ALL__';
                    const nodes = document.querySelectorAll('.deal-card');
                    nodes.forEach(card => {
                        const agent = (card.getAttribute('data-agent') || '').trim();
                        const match = !sel || sel === '__ALL__' || agent.localeCompare(sel, undefined, { sensitivity: 'accent' }) === 0;
                        if (match) card.classList.remove('hidden'); else card.classList.add('hidden');
                    });
                    refreshCounts();
                };
                if (agentFilter) {
                    agentFilter.addEventListener('change', applyFilter);
                    // Apply once on load to normalize counts
                    applyFilter();
                }
            }

            // ----- Existing Add Deal modal JS updated to load Agents/Clients -----
            const addDealBtn = document.getElementById('add-deal-btn');
            const dealModal = document.getElementById('add-deal-modal');
            const dealModalBackdrop = document.getElementById('deal-modal-backdrop');
            const dealModalContent = document.getElementById('deal-modal-content');
            const closeDealModalBtn = document.getElementById('close-deal-modal-btn');
            const propertySelectionStep = document.getElementById('property-selection-step');
            const dealDetailsStep = document.getElementById('deal-details-step');
            const nextStepBtn = document.getElementById('next-step-btn');
            const backStepBtn = document.getElementById('back-step-btn');
            const propertiesGrid = document.getElementById('properties-grid');
            const propertySearch = document.getElementById('property-search');

            const agentSelect = document.getElementById('agent-name');
            const clientSelect = document.getElementById('client-name');

            let selectedProperty = null;
            let allProperties = [];

            async function loadAgentsAndClients() {
                try {
                    // Agents
                    const agentsRes = await fetch('/Deals/GetAgents');
                    if (agentsRes.ok) {
                        const agents = await agentsRes.json();
                        populateSelect(agentSelect, agents, '-- Select an agent (optional) --');
                    } else {
                        console.warn('Failed to load agents');
                    }

                    // Clients (from Contacts table)
                    const clientsRes = await fetch('/Deals/GetClients');
                    if (clientsRes.ok) {
                        const clients = await clientsRes.json();
                        populateSelect(clientSelect, clients, '-- Select a client (optional) --');
                    } else {
                        console.warn('Failed to load clients');
                    }
                } catch (err) {
                    console.error('Error loading agents/clients:', err);
                }
            }

            function populateSelect(selectEl, items, placeholderText) {
                if (!selectEl) return;
                selectEl.innerHTML = '';
                const placeholder = document.createElement('option');
                placeholder.value = '';
                placeholder.textContent = placeholderText || '-- Select --';
                selectEl.appendChild(placeholder);

                items.forEach(i => {
                    const opt = document.createElement('option');
                    // value posts AgentName/ClientName as text (UserName or Contact.Name)
                    opt.value = i.name;
                    opt.textContent = i.name + (i.email ? (' · ' + i.email) : '');
                    selectEl.appendChild(opt);
                });
            }

            function openDealModal() {
                dealModal.classList.remove('hidden');
                dealModal.offsetHeight;
                setTimeout(function() {
                    dealModal.classList.remove('opacity-0');
                    dealModal.classList.add('opacity-100');
                    dealModalBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0.4)';
                    dealModalContent.classList.remove('scale-95');
                    dealModalContent.classList.add('scale-100');
                }, 10);
                document.body.style.overflow = 'hidden';
                loadProperties();
                loadAgentsAndClients(); // load agent/client options when opening modal
            }
            function closeDealModal() {
                dealModal.classList.remove('opacity-100');
                dealModal.classList.add('opacity-0');
                dealModalBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0)';
                dealModalContent.classList.remove('scale-100');
                dealModalContent.classList.add('scale-95');
                setTimeout(function() {
                    dealModal.classList.add('hidden');
                    resetModal();
                }, 300);
                document.body.style.overflow = '';
            }
            function resetModal() {
                propertySelectionStep.classList.remove('hidden');
                dealDetailsStep.classList.add('hidden');
                selectedProperty = null;
                nextStepBtn.disabled = true;
                const form = document.getElementById('deal-form'); if (form) form.reset();
                // reset selects to placeholder
                if (agentSelect) agentSelect.selectedIndex = 0;
                if (clientSelect) clientSelect.selectedIndex = 0;
            }
            function loadProperties() {
                fetch('/Deals/GetAvailableProperties')
                    .then(response => response.json())
                    .then(properties => {
                        allProperties = properties;
                        displayProperties(properties);
                    })
                    .catch(error => {
                        console.error('Error loading properties:', error);
                        propertiesGrid.innerHTML = '<p class="text-center text-gray-500 col-span-2">Error loading properties</p>';
                    });
            }
            function displayProperties(properties) {
                if (properties.length === 0) {
                    propertiesGrid.innerHTML = '<p class="text-center text-gray-500 col-span-2">No available properties found</p>';
                    return;
                }
                propertiesGrid.innerHTML = properties.map(property => `
                    <div class="property-card border rounded-lg p-3 cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-all" data-property-id="${property.id}">
                        <div class="flex justify-between items-start mb-2">
                            <h5 class="font-semibold text-sm truncate">${property.title}</h5>
                            <span class="text-xs px-2 py-1 rounded ${property.propertyType === 'Sell' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'}">
                                ${property.propertyType}
                            </span>
                        </div>
                        <p class="text-xs text-gray-600 mb-2 truncate">${property.address}</p>
                        <div class="flex justify-between items-center text-xs text-gray-500">
                            <span>${property.bedrooms} ??? ${property.bathrooms} ??</span>
                            <span class="font-semibold text-gray-900">₱ ${property.price.toLocaleString()}</span>
                        </div>
                    </div>
                `).join('');
                document.querySelectorAll('.property-card').forEach(card => {
                    card.addEventListener('click', function() {
                        document.querySelectorAll('.property-card').forEach(c => c.classList.remove('bg-blue-100', 'border-blue-500'));
                        this.classList.add('bg-blue-100', 'border-blue-500');
                        const propertyId = parseInt(this.dataset.propertyId);
                        selectedProperty = allProperties.find(p => p.id === propertyId);
                        nextStepBtn.disabled = false;
                        // Set offer constraints when a property is selected
                        const offerInput = document.getElementById('offer-amount');
                        const hint = document.getElementById('offer-amount-hint');
                        if (offerInput && selectedProperty) {
                            const max = Number(selectedProperty.price || 0);
                            const min = Math.round(max * 0.9 * 100) / 100; // 10% below price
                            offerInput.min = String(min);
                            offerInput.max = String(max);
                            if (hint) hint.textContent = `Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}`;
                        }
                    });
                });
            }
            function showDealDetailsStep() {
                propertySelectionStep.classList.add('hidden');
                dealDetailsStep.classList.remove('hidden');
                const preview = document.getElementById('selected-property-preview');
                preview.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div>
                            <h5 class="font-semibold text-gray-900">${selectedProperty.title}</h5>
                            <p class="text-sm text-gray-600">${selectedProperty.address}</p>
                            <div class="flex items-center gap-4 text-sm text-gray-500 mt-1">
                                <span>${selectedProperty.bedrooms} ??? ${selectedProperty.bathrooms} ??</span>
                                <span>${selectedProperty.area} sqm</span>
                            </div>
                        </div>
                        <div class="text-right">
                            <span class="text-xs px-2 py-1 rounded ${selectedProperty.propertyType === 'Sell' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'}">
                                ${selectedProperty.propertyType}
                            </span>
                            <p class="font-semibold text-gray-900 mt-1">₱ ${selectedProperty.price.toLocaleString()}</p>
                        </div>
                    </div>
                `;
                document.getElementById('selected-property-id').value = selectedProperty.id;
                document.getElementById('deal-title').value = `Deal for ${selectedProperty.title}`;
                // Ensure constraints are set on entering details step
                const offerInput = document.getElementById('offer-amount');
                const hint = document.getElementById('offer-amount-hint');
                if (offerInput && selectedProperty) {
                    const max = Number(selectedProperty.price || 0);
                    const min = Math.round(max * 0.9 * 100) / 100;
                    offerInput.min = String(min);
                    offerInput.max = String(max);
                    if (hint) hint.textContent = `Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}`;
                }
            }
            function showPropertySelectionStep() {
                dealDetailsStep.classList.add('hidden');
                propertySelectionStep.classList.remove('hidden');
            }

            if (!IS_ALL_DEALS && addDealBtn) {
                addDealBtn.addEventListener('click', openDealModal);
            }
            closeDealModalBtn.addEventListener('click', closeDealModal);
            nextStepBtn.addEventListener('click', showDealDetailsStep);
            backStepBtn.addEventListener('click', showPropertySelectionStep);
            document.getElementById('add-deal-modal').addEventListener('click', function (event) {
                const dealModal = document.getElementById('add-deal-modal');
                const backdrop = document.getElementById('deal-modal-backdrop');
                const overlay = document.getElementById('deal-modal-overlay');
                if (event.target === dealModal || event.target === backdrop || event.target === overlay) closeDealModal();
            });
            document.addEventListener('keydown', function (event) {
                if (event.key === 'Escape' && !document.getElementById('add-deal-modal').classList.contains('hidden')) {
                    closeDealModal();
                }
            });

            // Validate offer amount on input and on submit
            (function wireOfferValidation(){
                const offerInput = document.getElementById('offer-amount');
                const form = document.getElementById('deal-form');
                const hint = document.getElementById('offer-amount-hint');
                if (!offerInput || !form) return;

                function checkOffer(e) {
                    const raw = (offerInput.value || '').trim();
                    // Allow empty offer amount — can be set later in Deals screen
                    if (raw === '') {
                        offerInput.classList.remove('border-red-500', 'focus:ring-red-400');
                        return true;
                    }

                    const max = parseFloat(offerInput.max || '0');
                    const min = parseFloat(offerInput.min || '0');
                    const val = parseFloat(raw);
                    const ok = !isNaN(val) && (val >= min) && (val <= max);
                    offerInput.classList.toggle('border-red-500', !ok);
                    offerInput.classList.toggle('focus:ring-red-400', !ok);
                    if (!ok && e && e.type === 'submit') {
                        e.preventDefault();
                        const range = `between ${min.toLocaleString()} and ${max.toLocaleString()}`;
                        showToast(`Offer must be ${range}.`, 'error');
                        offerInput.focus();
                    }
                    return ok;
                }

                offerInput.addEventListener('input', () => checkOffer());
                form.addEventListener('submit', (e) => checkOffer(e));
            })();

            // Require a client to be selected before submission
            (function requireClient(){
                const form = document.getElementById('deal-form');
                const clientSel = document.getElementById('client-name');
                if (!form || !clientSel) return;
                form.addEventListener('submit', function(e){
                    const val = (clientSel.value || '').trim();
                    if (!val) {
                        e.preventDefault();
                        try { showToast('Please select a client before creating a deal.', 'error'); } catch {}
                        clientSel.focus();
                    }
                });
            })();
        });
    </script>
}

    <script>
        // Augment Deals board with search, type filter, offer buttons, header tools, sums, and drag from New
        (function(){
            const pipeline = document.getElementById('deals-pipeline');
            if (!pipeline) return;
            const IS_ALL_DEALS = @(isAllDeals.ToString().ToLower());

            // Inject secondary controls row
            try {
                const controls = document.createElement('div');
                controls.className = 'flex flex-col md:flex-row gap-3 md:items-center mb-4';
                controls.innerHTML = `
                    <div class="flex-1">
                        <label for="board-search" class="sr-only">Search</label>
                        <input id="board-search" type="text" placeholder="Search deals, properties, clients..." class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400" />
                    </div>
                    <div class="flex items-center gap-2">
                        <label for="type-filter" class="text-sm text-gray-700">Type</label>
                        <select id="type-filter" class="text-sm border border-gray-300 rounded-md px-2 py-1 min-w-[140px]">
                            <option value="__ALL__">All</option>
                        </select>
                    </div>
                    <div class="flex items-center gap-2">
                        <label for="status-toggle-empty" class="text-sm text-gray-700">Hide empty columns</label>
                        <input id="status-toggle-empty" type="checkbox" class="h-4 w-4" />
                    </div>`;
                pipeline.parentElement.insertBefore(controls, pipeline);
            } catch {}

            // Add edit buttons and sum placeholders to headers
            try {
                document.querySelectorAll('.editable-column-header').forEach(h => {
                    if (!h.querySelector('.column-sum')){
                        const sum = document.createElement('span');
                        sum.className = 'column-sum text-xs ml-2 opacity-80';
                        h.appendChild(sum);
                    }
                    if (!IS_ALL_DEALS && !h.querySelector('.edit-title-btn')){
                        const btn = document.createElement('button');
                        btn.type = 'button';
                        btn.className = 'edit-title-btn ml-auto text-black/60 hover:text-black';
                        btn.title = 'Rename column';
                        btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"/><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"/></svg>';
                        btn.addEventListener('click', (e)=>{ e.stopPropagation(); try{ h.dispatchEvent(new Event('dblclick')); }catch{} });
                        h.appendChild(btn);
                    }
                });
            } catch {}

            // Ensure data attributes for filtering
            document.querySelectorAll('.deal-card').forEach(card => {
                // type
                if (!card.getAttribute('data-type')){
                    const typeText = (card.querySelector('span.bg-blue-600')?.textContent || '').trim();
                    if (typeText) card.setAttribute('data-type', typeText);
                }
                // offer
                if (!card.getAttribute('data-offer')){
                    const offerText = (Array.from(card.querySelectorAll('p')).map(p=>p.textContent).find(t=>t && t.trim().startsWith('₱')) || '').replace(/[^0-9.]/g,'');
                    if (offerText) card.setAttribute('data-offer', offerText);
                }
            });

            // Populate type filter options
            try {
                const typeFilter = document.getElementById('type-filter');
                const types = Array.from(new Set(Array.from(document.querySelectorAll('.deal-card')).map(c => (c.getAttribute('data-type') || '').trim()).filter(Boolean))).sort();
                types.forEach(t => { const o = document.createElement('option'); o.value = t; o.textContent = t; typeFilter.appendChild(o); });
            } catch {}

            // Offer buttons per card
            function wireOfferButtons(){
                document.querySelectorAll('.deal-cards[data-stage="Negotiation"] .deal-card').forEach(card => {
                    if (card.querySelector('.deal-offer-btn')) return;
                    const price = card.getAttribute('data-price') || '0';
                    const row = document.createElement('div');
                    row.className = 'flex justify-end gap-2 pt-2';
                    row.innerHTML = `<button type="button" class="px-2 py-1 text-xs rounded border deal-offer-btn" data-deal-id="${card.getAttribute('data-deal-id') || ''}" data-price="${price}">Set Offer</button>`;
                    card.appendChild(row);
                });
                document.querySelectorAll('.deal-offer-btn').forEach(btn => {
                    if (btn._wired) return; btn._wired = true;
                    btn.addEventListener('click', function(e){
                        e.stopPropagation();
                        const id = this.getAttribute('data-deal-id');
                        const price = this.getAttribute('data-price');
                        try { window.openOfferModal && window.openOfferModal(id, Number(price||0)); } catch {}
                    });
                });
            }
            function cleanupOfferButtonsOutsideNegotiation(){
                document.querySelectorAll('.deal-card').forEach(card => {
                    const list = card.closest('.deal-cards');
                    if (!list || list.dataset.stage === 'Negotiation') return;
                    const btn = card.querySelector('.deal-offer-btn');
                    if (btn) {
                        const row = btn.closest('div');
                        if (row) row.remove();
                    }
                });
            }
            function updateOfferButtons(){
                cleanupOfferButtonsOutsideNegotiation();
                wireOfferButtons();
            }
            // Expose for other scripts (e.g., drag handlers) to invoke
            try { window.updateOfferButtons = updateOfferButtons; } catch {}
            if (!IS_ALL_DEALS) { updateOfferButtons(); }

            // Drag from New as well (when not All Deals)
            try {
                const isAllDeals = @(isAllDeals.ToString().ToLower());
                if (!isAllDeals) {
                    const newList = document.querySelector('.deal-cards[data-stage="New"]');
                    if (newList && window.Sortable) {
                        new Sortable(newList, { group:'deals', animation:150, ghostClass:'sortable-ghost', dragClass:'sortable-drag', onEnd: function(evt){
                            const dealId = evt.item.dataset.dealId;
                            const newStatus = evt.to.dataset.stage;
                            fetch('/Deals/MoveDeal', { method:'POST', headers:{ 'Content-Type':'application/x-www-form-urlencoded' }, body:`dealId=${dealId}&newStatus=${newStatus}` })
                                .then(r=>{ if(!r.ok) location.reload(); else { try{ refreshCounts(); updateOfferButtons(); }catch{} } })
                                .catch(()=>{ try{ refreshCounts(); updateOfferButtons(); }catch{} });
                        }});
                    }
                }
            } catch {}

            // Counts and sums
            function refreshSums(){
                document.querySelectorAll('.editable-column-header').forEach(h => {
                    const status = h.getAttribute('data-status');
                    const list = document.querySelector(`.deal-cards[data-stage="${status}"]`);
                    const sumEl = h.querySelector('.column-sum');
                    if (!list || !sumEl) return;
                    const cards = Array.from(list.children).filter(el => !el.classList.contains('hidden'));
                    const sum = cards.reduce((acc, el) => acc + (parseFloat(el.getAttribute('data-offer') || '0') || 0), 0);
                    sumEl.textContent = sum > 0 ? `₱ ${sum.toLocaleString()}` : '';
                });
            }
            function refreshCounts(){
                document.querySelectorAll('.editable-column-header').forEach(h => {
                    const status = h.getAttribute('data-status');
                    const list = document.querySelector(`.deal-cards[data-stage="${status}"]`);
                    const countEl = h.querySelector('.column-count');
                    if (!list || !countEl) return;
                    const visibleCount = Array.from(list.children).filter(el => !el.classList.contains('hidden')).length;
                    countEl.textContent = `(${visibleCount})`;
                });
                refreshSums();
            }
            try { refreshCounts(); } catch {}

            // Board-wide filters
            function applyBoardFilters(){
                const searchEl = document.getElementById('board-search');
                const typeFilter = document.getElementById('type-filter');
                const hideEmptyToggle = document.getElementById('status-toggle-empty');
                const q = (searchEl?.value || '').trim().toLowerCase();
                const t = (typeFilter?.value || '__ALL__');
                document.querySelectorAll('.deal-card').forEach(card => {
                    const text = [
                        card.querySelector('h4')?.textContent || '',
                        card.querySelector('p.text-xs.text-gray-500')?.textContent || '',
                        card.getAttribute('data-agent') || '',
                        card.getAttribute('data-client') || ''
                    ].join(' ').toLowerCase();
                    const typeOk = t === '__ALL__' || (card.getAttribute('data-type') || '') === t;
                    const match = (!q || text.includes(q)) && typeOk;
                    card.classList.toggle('hidden', !match);
                });
                const hideEmpty = hideEmptyToggle?.checked;
                document.querySelectorAll('.deal-cards').forEach(list => {
                    const wrap = list.closest('.w-72');
                    if (!wrap) return;
                    const visibleCount = Array.from(list.children).filter(el => !el.classList.contains('hidden')).length;
                    wrap.classList.toggle('hidden', !!hideEmpty && visibleCount === 0);
                });
                refreshCounts();
            }
            try{
                document.getElementById('board-search')?.addEventListener('input', applyBoardFilters);
                document.getElementById('type-filter')?.addEventListener('change', applyBoardFilters);
                document.getElementById('status-toggle-empty')?.addEventListener('change', applyBoardFilters);
                applyBoardFilters();
            } catch {}
        })();
    </script>


<script>
// Wire click-to-open for deal cards (view-only)
(function(){
    document.addEventListener('click', function(e){
        const btn = e.target.closest('button, .deal-offer-btn');
        if (btn) return;
        const card = e.target.closest('.deal-card');
        if (!card) return;
        const id = card.getAttribute('data-deal-id');
        if (!id) return;
        try { window.openDealViewModal && window.openDealViewModal(id); } catch {}
    });
})();
</script>
@section Styles {
    <style>
        /* Board: single row that fits within viewport width */
        #deals-pipeline {
            display: grid !important;
            grid-auto-flow: column !important;
            grid-auto-columns: minmax(220px, 1fr) !important;
            gap: 16px !important;
            align-items: start;
            overflow-x: auto;
        }
        #deals-pipeline > .w-72 { width: auto !important; }
        /* Keep columns compact and readable */
        .editable-column-header { border: 1px solid rgba(0,0,0,.06); border-radius: 8px; }
        .deal-cards { min-height: 220px; max-height: calc(100vh - 320px); overflow-y: auto; }

        .sortable-ghost {
            background-color: #cce5ff;
            border: 2px dashed #007bff;
            opacity: 0.6;
        }
        .sortable-drag {
            opacity: 1 !important;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        /* Sleeker cards */
        .deal-card { transition: box-shadow 150ms ease, transform 150ms ease; }
        .deal-card:hover { box-shadow: 0 10px 20px -5px rgba(0,0,0,.1), 0 6px 10px -4px rgba(0,0,0,.06); transform: translateY(-2px); }
        /* Column headers */
        .editable-column-header { border: 1px solid rgba(0,0,0,.06); }
        /* Column body */
        .deal-cards { min-height: 220px; }
    </style>
}


