@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = ViewData["Title"] ?? "Deals";
    var placeholder = Url.Content("~/assets/images/property-placeholder.jpg");
    var avatarPlaceholder = Url.Content("~/assets/images/avatar-placeholder.png");
    var dealsByStatus = ViewBag.DealsByStatus as Dictionary<string, List<RealEstateCRM.Models.Deal>> ?? new Dictionary<string, List<RealEstateCRM.Models.Deal>>();
    var isAllDeals = (ViewData["Title"]?.ToString() ?? "") == "All Deals";
    var allAgents = dealsByStatus.Values
        .SelectMany(l => l)
        .Select(d => d.AgentName)
        .Where(n => !string.IsNullOrWhiteSpace(n))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(n => n)
        .ToList();
}

<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-6">
    <h1 class="font-semibold text-2xl">@ViewData["Title"]</h1>
    <div class="flex items-center gap-3">
        @if (isAllDeals && allAgents.Any())
        {
            <div class="flex items-center gap-2">
                <label for="agent-filter" class="text-sm text-gray-700">Filter by Agent</label>
                <select id="agent-filter" class="text-sm border border-gray-300 rounded-md px-2 py-1">
                    <option value="__ALL__">All Agents</option>
                    @foreach (var a in allAgents)
                    {
                        <option value="@a">@a</option>
                    }
                </select>
            </div>
        }
        <button id="add-deal-btn" class="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
            Add Deal
        </button>
    </div>
</div>

<!-- Success/Error Toast Notification -->
<div id="toast-notification" class="fixed top-4 right-4 z-[10000] transform translate-x-full transition-transform duration-300 ease-in-out">
    <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 min-w-[300px]">
        <div class="flex items-center gap-3">
            <div id="toast-icon" class="flex-shrink-0">
                <!-- Success icon -->
                <svg id="toast-success-icon" class="h-6 w-6 text-green-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <!-- Error icon -->
                <svg id="toast-error-icon" class="h-6 w-6 text-red-600 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div class="flex-1">
                <p id="toast-message" class="text-sm font-medium text-gray-900"></p>
            </div>
            <button id="toast-close" class="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Deals Pipeline -->
<div id="deals-pipeline" class="flex gap-5 overflow-x-auto min-h-[600px]">
    <!-- Column: New -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-rose-200 text-rose-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="New" title="Double-click to rename">
            <span class="column-title" data-status="New">New</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("New") ? dealsByStatus["New"].Count : 0))</span>
            <button type="button" class="ml-2 text-rose-900/70 hover:text-rose-900 edit-title-btn" aria-label="Rename">??</button>
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="New">
            @if (dealsByStatus.ContainsKey("New"))
            {
                @foreach (var deal in dealsByStatus["New"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 cursor-default"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName" data-price="@(deal.Property?.Price ?? 0)">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">â‚± @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Offer Made -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-lime-200 text-lime-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="OfferMade" title="Double-click to rename">
            <span class="column-title" data-status="OfferMade">Offer Made</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("OfferMade") ? dealsByStatus["OfferMade"].Count : 0))</span>
            <button type="button" class="ml-2 text-lime-900/70 hover:text-lime-900 edit-title-btn" aria-label="Rename">??</button>
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="OfferMade">
            @if (dealsByStatus.ContainsKey("OfferMade"))
            {
                @foreach (var deal in dealsByStatus["OfferMade"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">â‚± @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Negotiation -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-yellow-200 text-yellow-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="Negotiation" title="Double-click to rename">
            <span class="column-title" data-status="Negotiation">Negotiation</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("Negotiation") ? dealsByStatus["Negotiation"].Count : 0))</span>
            <button type="button" class="ml-2 text-yellow-900/70 hover:text-yellow-900 edit-title-btn" aria-label="Rename">??</button>
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="Negotiation">
            @if (dealsByStatus.ContainsKey("Negotiation"))
            {
                @foreach (var deal in dealsByStatus["Negotiation"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">â‚± @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Column: Contract Draft -->
    <div class="w-72 bg-gray-50 rounded-lg p-2 flex-shrink-0">
        <div class="bg-emerald-200 text-emerald-800 px-3 py-2 rounded-md text-sm font-medium editable-column-header" data-status="ContractDraft" title="Double-click to rename">
            <span class="column-title" data-status="ContractDraft">Contract Draft</span>
            <span class="column-count">(@(dealsByStatus.ContainsKey("ContractDraft") ? dealsByStatus["ContractDraft"].Count : 0))</span>
            <button type="button" class="ml-2 text-emerald-900/70 hover:text-emerald-900 edit-title-btn" aria-label="Rename">??</button>
        </div>
        <div class="deal-cards mt-4 space-y-4 p-1 h-full" data-stage="ContractDraft">
            @if (dealsByStatus.ContainsKey("ContractDraft"))
            {
                @foreach (var deal in dealsByStatus["ContractDraft"])
                {
                    <div class="deal-card bg-white p-3 rounded-md shadow-sm border border-gray-200 @(isAllDeals ? "" : "cursor-grab active:cursor-grabbing")"
                         data-deal-id="@deal.Id" data-agent="@deal.AgentName">
                        @if (deal.Property != null)
                        {
                            var imageSrc = !string.IsNullOrEmpty(deal.Property.ImagePath) ? Url.Content(deal.Property.ImagePath) : placeholder;
                            <img src="@imageSrc" alt="Property - @deal.Property.Title" class="w-full h-32 object-cover rounded-md mb-3" />
                            <div class="flex justify-between items-center">
                                <h4 class="font-bold text-sm">@deal.Property.Title</h4>
                                <span class="text-xs font-medium bg-blue-600 text-white px-2 py-0.5 rounded">
                                    @deal.Property.PropertyType
                                </span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(deal.AgentName))
                            {
                                <div class="mt-1">
                                    <span class="text-[11px] bg-gray-100 text-gray-700 px-2 py-0.5 rounded">Agent: @deal.AgentName</span>
                                </div>
                            }
                            <p class="text-xs text-gray-500 mt-1">@deal.Property.Address</p>
                        }
                        else
                        {
                            <div class="h-32 bg-gray-200 rounded-md mb-3 flex items-center justify-center">
                                <span class="text-gray-500 text-sm">No Property</span>
                            </div>
                            <h4 class="font-bold text-sm">@deal.Title</h4>
                        }
                        
                        @if (deal.OfferAmount.HasValue)
                        {
                            <p class="text-sm font-semibold text-green-600 mt-2">â‚± @deal.OfferAmount.Value.ToString("N0")</p>
                        }
                        
                        <div class="mt-4 space-y-3">
                            @if (!string.IsNullOrEmpty(deal.AgentName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.AgentName</p>
                                        <p class="text-xs text-gray-500">Agent</p>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(deal.ClientName))
                            {
                                <div class="flex items-center gap-2">
                                    <img src="@avatarPlaceholder" class="w-6 h-6 rounded-full object-cover" />
                                    <div>
                                        <p class="text-xs font-medium text-gray-800">@deal.ClientName</p>
                                        <p class="text-xs text-gray-500">Client</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Edit Offer Modal -->
<div id="offer-modal" class="fixed inset-0 z-[10001] hidden">
    <div class="absolute inset-0 bg-black/30" id="offer-modal-backdrop"></div>
    <div class="absolute inset-0 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="px-4 py-3 border-b flex items-center justify-between">
                <h3 class="font-semibold text-gray-900">Set Offer Amount</h3>
                <button id="offer-close" class="text-gray-500 hover:text-gray-700">âœ•</button>
            </div>
            <div class="p-4">
                <form id="offer-form" class="space-y-4">
                    <input type="hidden" id="offer-deal-id" />
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="offer-input">Offer Amount</label>
                        <input id="offer-input" type="number" step="0.01" class="w-full border rounded-md px-3 py-2" />
                        <p id="offer-hint" class="text-xs text-gray-500 mt-1"></p>
                    </div>
                    <div class="flex justify-end gap-2 pt-2">
                        <button type="button" id="offer-cancel" class="px-3 py-2 rounded-md border">Cancel</button>
                        <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        (function(){
            const modal = document.getElementById('offer-modal');
            const closeBtn = document.getElementById('offer-close');
            const cancelBtn = document.getElementById('offer-cancel');
            const form = document.getElementById('offer-form');
            const dealIdEl = document.getElementById('offer-deal-id');
            const inputEl = document.getElementById('offer-input');
            const hintEl = document.getElementById('offer-hint');

            function open(id, price){
                dealIdEl.value = String(id);
                // Set min/max based on property price (10% below to 100%)
                const max = Number(price || 0);
                const min = Math.round(max * 0.9 * 100) / 100;
                if (max > 0){
                    inputEl.min = String(min);
                    inputEl.max = String(max);
                    hintEl.textContent = `Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}`;
                } else {
                    inputEl.removeAttribute('min');
                    inputEl.removeAttribute('max');
                    hintEl.textContent = '';
                }
                inputEl.value = '';
                modal.classList.remove('hidden');
            }
            function close(){ modal.classList.add('hidden'); }

            window.openOfferModal = open;
            closeBtn.addEventListener('click', close);
            cancelBtn.addEventListener('click', close);
            document.getElementById('offer-modal-backdrop').addEventListener('click', close);

            form.addEventListener('submit', function(ev){
                ev.preventDefault();
                const id = dealIdEl.value;
                const amount = inputEl.value;
                fetch('/Deals/SetOffer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `dealId=${encodeURIComponent(id)}&offerAmount=${encodeURIComponent(amount)}`
                }).then(r => {
                    if(!r.ok){ return r.text().then(t => { throw new Error(t || 'Failed'); }); }
                }).then(() => { location.reload(); })
                .catch(err => { alert(err.message || 'Failed to save offer'); });
            });

            function attachNewCardHandlers(){
                const newCol = document.querySelector('.deal-cards[data-stage="New"]');
                if (!newCol) return;
                newCol.querySelectorAll('.deal-card').forEach(c => {
                    c.style.cursor = 'pointer';
                    c.addEventListener('click', function(){
                        const id = this.getAttribute('data-deal-id');
                        const price = this.getAttribute('data-price');
                        window.openOfferModal(id, Number(price || 0));
                    });
                });
            }
            if (document.readyState !== 'loading') attachNewCardHandlers();
            document.addEventListener('DOMContentLoaded', attachNewCardHandlers);
        })();
    </script>
</div>

<!-- Add Deal Modal -->
<div id="add-deal-modal" class="fixed inset-0 z-[9999] hidden opacity-0 transition-opacity duration-300 ease-out" style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
    <!-- Background overlay -->
    <div class="absolute inset-0 transition-all duration-300 ease-out" id="deal-modal-backdrop" style="background-color: rgba(29, 29, 29, 0); transition: background-color 300ms ease-out;"></div>

    <!-- Modal content container -->
    <div class="relative h-full w-full flex items-center justify-center p-4">
        <!-- Modal dialog -->
        <div class="relative bg-white rounded-lg shadow-xl w-[900px] max-h-[90vh] overflow-hidden transform scale-95 transition-transform duration-300 ease-out" id="deal-modal-content">
            <!-- Close button -->
            <div class="absolute top-4 right-4 z-10">
                <button id="close-deal-modal-btn" class="text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600 transition-colors duration-200" aria-label="Close">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- Modal content -->
            <div class="overflow-y-auto max-h-[90vh]">
                <div class="p-8">
                    <h3 class="text-xl font-semibold text-gray-900 text-center mb-6">Add New Deal</h3>

                    <!-- Step 1: Select Property -->
                    <div id="property-selection-step">
                        <h4 class="text-lg font-medium text-gray-900 mb-4">Select a Property</h4>
                        
                        <!-- Search properties -->
                        <div class="mb-4">
                            <input type="text" id="property-search" placeholder="Search properties..." 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                        </div>

                        <!-- Properties grid -->
                        <div id="properties-grid" class="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-60 overflow-y-auto">
                            <!-- Properties will be loaded here via JavaScript -->
                        </div>

                        <div class="flex justify-end mt-6">
                            <button id="next-step-btn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                                Next
                            </button>
                        </div>
                    </div>

                    <!-- Step 2: Deal Details -->
                    <div id="deal-details-step" class="hidden">
                        <h4 class="text-lg font-medium text-gray-900 mb-4">Deal Details</h4>
                        
                        <!-- Selected property preview -->
                        <div id="selected-property-preview" class="bg-gray-50 p-4 rounded-lg mb-6">
                            <!-- Property details will be shown here -->
                        </div>

                        <form asp-controller="Deals" asp-action="CreateDeal" method="post" id="deal-form" class="space-y-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="selected-property-id" name="PropertyId" />

                            <!-- Deal Title -->
                            <div>
                                <label for="deal-title" class="block text-sm font-medium text-gray-700 mb-1">
                                    Deal Title <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="deal-title" name="Title" required 
                                       placeholder="e.g., John Doe - Property Purchase"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                            </div>

                            <!-- Description -->
                            <div>
                                <label for="deal-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                <textarea id="deal-description" name="Description" rows="3" 
                                          placeholder="Additional details about this deal..."
                                          class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 resize-none"></textarea>
                            </div>

                            <!-- Agent and Client in two columns -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <!-- Agent Name (populated from users in Agent role) -->
                                <div>
                                    <label for="agent-name" class="block text-sm font-medium text-gray-700 mb-1">Agent Name</label>
                                    <select id="agent-name" name="AgentName"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                                        <option value="">-- Select an agent (optional) --</option>
                                    </select>
                                </div>

                                <!-- Client Name (populated from Contacts table) -->
                                <div>
                                    <label for="client-name" class="block text-sm font-medium text-gray-700 mb-1">Client Name</label>
                                    <select id="client-name" name="ClientName"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                                        <option value="">-- Select a client (optional) --</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Offer Amount -->
                            <div>
                                <label for="offer-amount" class="block text-sm font-medium text-gray-700 mb-1">Offer Amount (?)</label>
                                <input type="number" id="offer-amount" name="OfferAmount" min="0" step="0.01"
                                       placeholder="e.g., 4,500,000 (leave blank if none)"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
                                <p id="offer-amount-hint" class="mt-1 text-xs text-gray-500"></p>
                            </div>

                            <div class="flex gap-3 pt-6">
                                <button type="button" id="back-step-btn" class="flex-1 px-4 py-2 bg-gray-200 text-gray-800 text-base font-medium rounded-lg hover:bg-gray-300">
                                    Back
                                </button>
                                <button type="submit" class="flex-1 px-4 py-2 bg-blue-600 text-white text-base font-medium rounded-lg hover:bg-blue-700">
                                    Create Deal
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ===============================
            // TOAST NOTIFICATION SYSTEM
            // ===============================
            
            // Enhanced Toast notification system
            function showToast(message, type = 'success') {
                const toast = document.getElementById('toast-notification');
                const messageEl = document.getElementById('toast-message');
                const successIcon = document.getElementById('toast-success-icon');
                const errorIcon = document.getElementById('toast-error-icon');

                // Set message
                messageEl.textContent = message;

                // Show appropriate icon
                if (type === 'success') {
                    successIcon.classList.remove('hidden');
                    errorIcon.classList.add('hidden');
                } else {
                    successIcon.classList.add('hidden');
                    errorIcon.classList.remove('hidden');
                }

                // Show toast
                toast.classList.remove('translate-x-full');
                toast.classList.add('translate-x-0');

                // Auto hide after 3 seconds
                setTimeout(() => {
                    hideToast();
                }, 3000);
            }

            function hideToast() {
                const toast = document.getElementById('toast-notification');
                toast.classList.remove('translate-x-0');
                toast.classList.add('translate-x-full');
            }

            // Toast close button
            document.getElementById('toast-close').addEventListener('click', hideToast);

            // Check for success message from TempData
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showToast('@Html.Raw(TempData["SuccessMessage"])', 'success');
                </text>
            }
            // Check for error message from TempData
            @if (TempData["ErrorMessage"] != null)
            {
                <text>
                showToast('@Html.Raw(TempData["ErrorMessage"])', 'error');
                </text>
            }

            // ----- Column name persistence (localStorage) -----
            const defaultColumnNames = {
                New: 'New',
                OfferMade: 'Offer Made',
                Negotiation: 'Negotiation',
                ContractDraft: 'Contract Draft'
            };

            function getStoredNames() {
                try {
                    const raw = localStorage.getItem('dealColumnNames');
                    return raw ? { ...defaultColumnNames, ...JSON.parse(raw) } : { ...defaultColumnNames };
                } catch { return { ...defaultColumnNames }; }
            }
            function saveStoredNames(names) {
                localStorage.setItem('dealColumnNames', JSON.stringify(names));
            }

            const names = getStoredNames();

            // Apply stored names to headers
            document.querySelectorAll('.column-title').forEach(span => {
                const status = span.dataset.status;
                if (names[status]) span.textContent = names[status];
            });

            // Inline rename: double-click header OR click ?? button
            function beginRename(headerEl) {
                const titleSpan = headerEl.querySelector('.column-title');
                const status = titleSpan.dataset.status;
                const current = titleSpan.textContent;

                // Create input
                const input = document.createElement('input');
                input.type = 'text';
                input.value = current;
                input.className = 'ml-[-2px] px-1 py-0.5 rounded border border-gray-300 text-sm';
                input.style.minWidth = '140px';

                // Replace span with input temporarily
                titleSpan.replaceWith(input);
                input.focus();
                input.select();

                function commit(save) {
                    const newValue = (save ? input.value.trim() : current) || defaultColumnNames[status];
                    names[status] = newValue;
                    saveStoredNames(names);

                    const newSpan = document.createElement('span');
                    newSpan.className = 'column-title';
                    newSpan.dataset.status = status;
                    newSpan.textContent = newValue;

                    input.replaceWith(newSpan);
                }

                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') commit(true);
                    if (e.key === 'Escape') commit(false);
                });
                input.addEventListener('blur', () => commit(true));
            }

            // Wire events
            document.querySelectorAll('.editable-column-header').forEach(header => {
                header.addEventListener('dblclick', () => beginRename(header));
                const btn = header.querySelector('.edit-title-btn');
                if (btn) btn.addEventListener('click', (e) => { e.stopPropagation(); beginRename(header); });
            });

            // ----- Drag-n-drop (existing) + live count update -----
            const pipelines = document.querySelectorAll('.deal-cards');
            const isAllDeals = @(isAllDeals.ToString().ToLower());
            function refreshCounts() {
                document.querySelectorAll('.editable-column-header').forEach(h => {
                    const status = h.dataset.status;
                    const list = document.querySelector(`.deal-cards[data-stage="${status}"]`);
                    const countEl = h.querySelector('.column-count');
                    if (list && countEl) {
                        const visibleCount = isAllDeals
                            ? Array.from(list.children).filter(el => !el.classList.contains('hidden')).length
                            : list.children.length;
                        countEl.textContent = `(${visibleCount})`;
                    }
                });
            }

            // Only enable drag-and-drop when not viewing All Deals
            if (!isAllDeals) {
                pipelines.forEach(column => {
                    const stage = column.getAttribute('data-stage');
                    if (stage === 'New') return; // Disable dragging in New column
                    // Sortable provided elsewhere globally
                    new Sortable(column, {
                        group: 'deals',
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        dragClass: 'sortable-drag',
                        onEnd: function (evt) {
                            const dealId = evt.item.dataset.dealId;
                            const newStatus = evt.to.dataset.stage;

                            fetch('/Deals/MoveDeal', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                                body: `dealId=${dealId}&newStatus=${newStatus}`
                            }).then(response => {
                                if (!response.ok) {
                                    console.error('Failed to move deal');
                                    location.reload();
                                } else {
                                    refreshCounts();
                                }
                            }).catch(() => refreshCounts());
                        }
                    });
                });
            }

            // Initial count sync (in case client moves later)
            refreshCounts();

            // Agent filter for All Deals
            if (isAllDeals) {
                const agentFilter = document.getElementById('agent-filter');
                const applyFilter = () => {
                    const sel = agentFilter ? agentFilter.value : '__ALL__';
                    const nodes = document.querySelectorAll('.deal-card');
                    nodes.forEach(card => {
                        const agent = (card.getAttribute('data-agent') || '').trim();
                        const match = !sel || sel === '__ALL__' || agent.localeCompare(sel, undefined, { sensitivity: 'accent' }) === 0;
                        if (match) card.classList.remove('hidden'); else card.classList.add('hidden');
                    });
                    refreshCounts();
                };
                if (agentFilter) {
                    agentFilter.addEventListener('change', applyFilter);
                    // Apply once on load to normalize counts
                    applyFilter();
                }
            }

            // ----- Existing Add Deal modal JS updated to load Agents/Clients -----
            const addDealBtn = document.getElementById('add-deal-btn');
            const dealModal = document.getElementById('add-deal-modal');
            const dealModalBackdrop = document.getElementById('deal-modal-backdrop');
            const dealModalContent = document.getElementById('deal-modal-content');
            const closeDealModalBtn = document.getElementById('close-deal-modal-btn');
            const propertySelectionStep = document.getElementById('property-selection-step');
            const dealDetailsStep = document.getElementById('deal-details-step');
            const nextStepBtn = document.getElementById('next-step-btn');
            const backStepBtn = document.getElementById('back-step-btn');
            const propertiesGrid = document.getElementById('properties-grid');
            const propertySearch = document.getElementById('property-search');

            const agentSelect = document.getElementById('agent-name');
            const clientSelect = document.getElementById('client-name');

            let selectedProperty = null;
            let allProperties = [];

            async function loadAgentsAndClients() {
                try {
                    // Agents
                    const agentsRes = await fetch('/Deals/GetAgents');
                    if (agentsRes.ok) {
                        const agents = await agentsRes.json();
                        populateSelect(agentSelect, agents, '-- Select an agent (optional) --');
                    } else {
                        console.warn('Failed to load agents');
                    }

                    // Clients (from Contacts table)
                    const clientsRes = await fetch('/Deals/GetClients');
                    if (clientsRes.ok) {
                        const clients = await clientsRes.json();
                        populateSelect(clientSelect, clients, '-- Select a client (optional) --');
                    } else {
                        console.warn('Failed to load clients');
                    }
                } catch (err) {
                    console.error('Error loading agents/clients:', err);
                }
            }

            function populateSelect(selectEl, items, placeholderText) {
                if (!selectEl) return;
                selectEl.innerHTML = '';
                const placeholder = document.createElement('option');
                placeholder.value = '';
                placeholder.textContent = placeholderText || '-- Select --';
                selectEl.appendChild(placeholder);

                items.forEach(i => {
                    const opt = document.createElement('option');
                    // value posts AgentName/ClientName as text (UserName or Contact.Name)
                    opt.value = i.name;
                    opt.textContent = i.name + (i.email ? (' ï¿½ ' + i.email) : '');
                    selectEl.appendChild(opt);
                });
            }

            function openDealModal() {
                dealModal.classList.remove('hidden');
                dealModal.offsetHeight;
                setTimeout(function() {
                    dealModal.classList.remove('opacity-0');
                    dealModal.classList.add('opacity-100');
                    dealModalBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0.4)';
                    dealModalContent.classList.remove('scale-95');
                    dealModalContent.classList.add('scale-100');
                }, 10);
                document.body.style.overflow = 'hidden';
                loadProperties();
                loadAgentsAndClients(); // load agent/client options when opening modal
            }
            function closeDealModal() {
                dealModal.classList.remove('opacity-100');
                dealModal.classList.add('opacity-0');
                dealModalBackdrop.style.backgroundColor = 'rgba(29, 29, 29, 0)';
                dealModalContent.classList.remove('scale-100');
                dealModalContent.classList.add('scale-95');
                setTimeout(function() {
                    dealModal.classList.add('hidden');
                    resetModal();
                }, 300);
                document.body.style.overflow = '';
            }
            function resetModal() {
                propertySelectionStep.classList.remove('hidden');
                dealDetailsStep.classList.add('hidden');
                selectedProperty = null;
                nextStepBtn.disabled = true;
                const form = document.getElementById('deal-form'); if (form) form.reset();
                // reset selects to placeholder
                if (agentSelect) agentSelect.selectedIndex = 0;
                if (clientSelect) clientSelect.selectedIndex = 0;
            }
            function loadProperties() {
                fetch('/Deals/GetAvailableProperties')
                    .then(response => response.json())
                    .then(properties => {
                        allProperties = properties;
                        displayProperties(properties);
                    })
                    .catch(error => {
                        console.error('Error loading properties:', error);
                        propertiesGrid.innerHTML = '<p class="text-center text-gray-500 col-span-2">Error loading properties</p>';
                    });
            }
            function displayProperties(properties) {
                if (properties.length === 0) {
                    propertiesGrid.innerHTML = '<p class="text-center text-gray-500 col-span-2">No available properties found</p>';
                    return;
                }
                propertiesGrid.innerHTML = properties.map(property => `
                    <div class="property-card border rounded-lg p-3 cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-all" data-property-id="${property.id}">
                        <div class="flex justify-between items-start mb-2">
                            <h5 class="font-semibold text-sm truncate">${property.title}</h5>
                            <span class="text-xs px-2 py-1 rounded ${property.propertyType === 'Sell' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'}">
                                ${property.propertyType}
                            </span>
                        </div>
                        <p class="text-xs text-gray-600 mb-2 truncate">${property.address}</p>
                        <div class="flex justify-between items-center text-xs text-gray-500">
                            <span>${property.bedrooms} ??? ${property.bathrooms} ??</span>
                            <span class="font-semibold text-gray-900">â‚± ${property.price.toLocaleString()}</span>
                        </div>
                    </div>
                `).join('');
                document.querySelectorAll('.property-card').forEach(card => {
                    card.addEventListener('click', function() {
                        document.querySelectorAll('.property-card').forEach(c => c.classList.remove('bg-blue-100', 'border-blue-500'));
                        this.classList.add('bg-blue-100', 'border-blue-500');
                        const propertyId = parseInt(this.dataset.propertyId);
                        selectedProperty = allProperties.find(p => p.id === propertyId);
                        nextStepBtn.disabled = false;
                        // Set offer constraints when a property is selected
                        const offerInput = document.getElementById('offer-amount');
                        const hint = document.getElementById('offer-amount-hint');
                        if (offerInput && selectedProperty) {
                            const max = Number(selectedProperty.price || 0);
                            const min = Math.round(max * 0.9 * 100) / 100; // 10% below price
                            offerInput.min = String(min);
                            offerInput.max = String(max);
                            if (hint) hint.textContent = `Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}`;
                        }
                    });
                });
            }
            function showDealDetailsStep() {
                propertySelectionStep.classList.add('hidden');
                dealDetailsStep.classList.remove('hidden');
                const preview = document.getElementById('selected-property-preview');
                preview.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div>
                            <h5 class="font-semibold text-gray-900">${selectedProperty.title}</h5>
                            <p class="text-sm text-gray-600">${selectedProperty.address}</p>
                            <div class="flex items-center gap-4 text-sm text-gray-500 mt-1">
                                <span>${selectedProperty.bedrooms} ??? ${selectedProperty.bathrooms} ??</span>
                                <span>${selectedProperty.area} sqm</span>
                            </div>
                        </div>
                        <div class="text-right">
                            <span class="text-xs px-2 py-1 rounded ${selectedProperty.propertyType === 'Sell' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'}">
                                ${selectedProperty.propertyType}
                            </span>
                            <p class="font-semibold text-gray-900 mt-1">â‚± ${selectedProperty.price.toLocaleString()}</p>
                        </div>
                    </div>
                `;
                document.getElementById('selected-property-id').value = selectedProperty.id;
                document.getElementById('deal-title').value = `Deal for ${selectedProperty.title}`;
                // Ensure constraints are set on entering details step
                const offerInput = document.getElementById('offer-amount');
                const hint = document.getElementById('offer-amount-hint');
                if (offerInput && selectedProperty) {
                    const max = Number(selectedProperty.price || 0);
                    const min = Math.round(max * 0.9 * 100) / 100;
                    offerInput.min = String(min);
                    offerInput.max = String(max);
                    if (hint) hint.textContent = `Allowed range: ${min.toLocaleString()} - ${max.toLocaleString()}`;
                }
            }
            function showPropertySelectionStep() {
                dealDetailsStep.classList.add('hidden');
                propertySelectionStep.classList.remove('hidden');
            }

            addDealBtn.addEventListener('click', openDealModal);
            closeDealModalBtn.addEventListener('click', closeDealModal);
            nextStepBtn.addEventListener('click', showDealDetailsStep);
            backStepBtn.addEventListener('click', showPropertySelectionStep);
            document.getElementById('add-deal-modal').addEventListener('click', function (event) {
                const dealModal = document.getElementById('add-deal-modal');
                const backdrop = document.getElementById('deal-modal-backdrop');
                if (event.target === dealModal || event.target === backdrop) closeDealModal();
            });
            document.addEventListener('keydown', function (event) {
                if (event.key === 'Escape' && !document.getElementById('add-deal-modal').classList.contains('hidden')) {
                    closeDealModal();
                }
            });

            // Validate offer amount on input and on submit
            (function wireOfferValidation(){
                const offerInput = document.getElementById('offer-amount');
                const form = document.getElementById('deal-form');
                const hint = document.getElementById('offer-amount-hint');
                if (!offerInput || !form) return;

                function checkOffer(e) {
                    const raw = (offerInput.value || '').trim();
                    // Allow empty offer amount â€” can be set later in Deals screen
                    if (raw === '') {
                        offerInput.classList.remove('border-red-500', 'focus:ring-red-400');
                        return true;
                    }

                    const max = parseFloat(offerInput.max || '0');
                    const min = parseFloat(offerInput.min || '0');
                    const val = parseFloat(raw);
                    const ok = !isNaN(val) && (val >= min) && (val <= max);
                    offerInput.classList.toggle('border-red-500', !ok);
                    offerInput.classList.toggle('focus:ring-red-400', !ok);
                    if (!ok && e && e.type === 'submit') {
                        e.preventDefault();
                        const range = `between ${min.toLocaleString()} and ${max.toLocaleString()}`;
                        showToast(`Offer must be ${range}.`, 'error');
                        offerInput.focus();
                    }
                    return ok;
                }

                offerInput.addEventListener('input', () => checkOffer());
                form.addEventListener('submit', (e) => checkOffer(e));
            })();
        });
    </script>
}

@section Styles {
    <style>
        .sortable-ghost {
            background-color: #cce5ff;
            border: 2px dashed #007bff;
            opacity: 0.6;
        }
        .sortable-drag {
            opacity: 1 !important;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .edit-title-btn { visibility: hidden; font-size: 12px; }
        .editable-column-header:hover .edit-title-btn { visibility: visible; }
    </style>
}

