@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
    <!-- User Dropdown -->
    <div class="relative inline-block text-left">
        <div>
            <button type="button" 
                    id="user-menu-button" 
                    class="inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    aria-expanded="false" 
                    aria-haspopup="true"
                    onclick="toggleUserDropdown()">
                <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span class="ml-2">@User.Identity?.Name</span>
                <svg class="-mr-1 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>

        <!-- Dropdown menu -->
        <div id="user-dropdown" 
             class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
             role="menu" 
             aria-orientation="vertical" 
             aria-labelledby="user-menu-button" 
             tabindex="-1">
            <div class="py-1" role="none">
                <!-- User info -->
                @{
                    var currentUser = await UserManager.GetUserAsync(User);
                    var isBroker = currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Broker");
                    var isAgent = currentUser != null && !isBroker;
                }
                <div class="px-4 py-2 text-sm text-gray-700 border-b border-gray-100">
                    <div class="font-medium">@User.Identity?.Name</div>
                    <div class="text-gray-500 text-xs">Signed in</div>

                    @if (isBroker)
                    {
                        <!-- Admin status badge -->
                        <div class="mt-2">
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                                Logged in as admin
                            </span>
                        </div>
                    }
                    else if (isAgent)
                    {
                        <!-- Agent status badge -->
                        <div class="mt-2">
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                                Logged in as Agent
                            </span>
                        </div>
                    }
                </div>
                
                @if (isBroker)
                {
                    <!-- Admin-only open modal to create agent account -->
                    <button type="button"
                            id="open-create-agent-modal"
                            class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex items-center"
                            role="menuitem" tabindex="-1">
                        <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Create Agent Account
                    </button>
                }

                <!-- Account Management -->
                <a asp-area="Identity" 
                   asp-page="/Account/Manage/Index"
                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900" 
                   role="menuitem" 
                   tabindex="-1">
                    <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    Manage Account
                </a>
                
                <!-- Settings -->
                <a href="#" 
                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900" 
                   role="menuitem" 
                   tabindex="-1">
                    <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    Settings
                </a>
                
                <!-- Divider -->
                <hr class="border-gray-100">
                
                <!-- Logout -->
                <form asp-area="Identity" 
                      asp-page="/Account/Logout" 
                      asp-route-returnUrl="@Url.Action("Index", "Dashboard", new { area = "" })" 
                      method="post"
                      class="block">
                    <button type="submit" 
                            class="w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-red-50 hover:text-red-900" 
                            role="menuitem" 
                            tabindex="-1">
                        <svg class="w-4 h-4 inline mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                        </svg>
                        Sign out
                    </button>
                </form>
            </div>
        </div>
    </div>
}
else
{
    <!-- Login button only for non-authenticated users; registration is admin-only -->
    <div class="flex items-center gap-2">
        <a asp-area="Identity" 
           asp-page="/Account/Login"
           class="px-4 py-2 text-sm text-gray-700 hover:text-gray-900">
            Login
        </a>
    </div>
}

<!-- Create Agent Modal (only shown when admin clicks) -->
<div id="create-agent-modal" class="fixed inset-0 z-[9999] hidden opacity-0 transition-opacity duration-200 ease-out">
    <div id="create-agent-backdrop" class="absolute inset-0 bg-transparent transition-colors duration-200"></div>

    <div class="relative h-full w-full flex items-center justify-center p-4">
        <div id="create-agent-content" class="relative bg-white rounded-lg shadow-xl w-[480px] max-w-full transform scale-95 transition-transform duration-200">
            <div class="flex items-center justify-between px-6 py-4 border-b">
                <h3 class="text-lg font-semibold">Create Agent Account</h3>
                <button id="close-create-agent-modal" class="text-gray-400 hover:text-gray-600" aria-label="Close">
                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="p-6">
                <form asp-controller="Admin" asp-action="CreateAgent" method="post" id="create-agent-form" class="space-y-4">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="returnUrl" value="/Dashboard" />

                    <div>
                        <label class="block text-sm font-medium text-neutral-700">Email</label>
                        <input name="Email" required type="email"
                               class="mt-2 w-full border-0 border-b border-neutral-300 focus:border-neutral-900 focus:ring-0 py-2 placeholder-neutral-400"
                               placeholder="agent@example.com" autocomplete="username" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-neutral-700">Password</label>
                        <div class="relative mt-2">
                            <input name="Password" required type="password" id="create-agent-password"
                                   class="w-full border-0 border-b border-neutral-300 focus:border-neutral-900 focus:ring-0 py-2 pr-10 placeholder-neutral-400"
                                   placeholder="••••••••" autocomplete="new-password" />
                            <button type="button" id="toggle-create-agent-password"
                                    class="absolute inset-y-0 right-0 flex items-center text-neutral-500 hover:text-neutral-700"
                                    aria-label="Toggle password visibility">
                                <svg id="create-eye-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                    <path d="M2 12s3.5-7 10-7 10 7 10 7-3.5 7-10 7-10-7-10-7z" stroke-width="2"/>
                                    <circle cx="12" cy="12" r="3" stroke-width="2"/>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-neutral-700">Confirm Password</label>
                        <div class="relative mt-2">
                            <input name="ConfirmPassword" required type="password" id="create-agent-confirm-password"
                                   class="w-full border-0 border-b border-neutral-300 focus:border-neutral-900 focus:ring-0 py-2 pr-10 placeholder-neutral-400"
                                   placeholder="••••••••" autocomplete="new-password" />
                            <button type="button" id="toggle-create-agent-confirm-password"
                                    class="absolute inset-y-0 right-0 flex items-center text-neutral-500 hover:text-neutral-700"
                                    aria-label="Toggle confirm password visibility">
                                <svg id="create-eye-icon-confirm" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                    <path d="M2 12s3.5-7 10-7 10 7 10 7-3.5 7-10 7-10-7-10-7z" stroke-width="2"/>
                                    <circle cx="12" cy="12" r="3" stroke-width="2"/>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div class="pt-4">
                        <button type="submit" id="create-agent-submit" class="w-full h-10 rounded-full bg-neutral-900 text-white font-medium hover:bg-neutral-800 transition">
                            Create Agent Account
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleUserDropdown() {
        const dropdown = document.getElementById('user-dropdown');
        const button = document.getElementById('user-menu-button');
        
        dropdown.classList.toggle('hidden');
        
        // Update aria-expanded
        const isExpanded = !dropdown.classList.contains('hidden');
        button.setAttribute('aria-expanded', isExpanded);
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const dropdown = document.getElementById('user-dropdown');
        const button = document.getElementById('user-menu-button');
        
        if (dropdown && button && !button.contains(event.target) && !dropdown.contains(event.target)) {
            dropdown.classList.add('hidden');
            button.setAttribute('aria-expanded', 'false');
        }
    });

    // Close dropdown with Escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const dropdown = document.getElementById('user-dropdown');
            const button = document.getElementById('user-menu-button');
            
            if (dropdown && !dropdown.classList.contains('hidden')) {
                dropdown.classList.add('hidden');
                button.setAttribute('aria-expanded', 'false');
                button.focus();
            }
        }
    });

    // Modal open/close handlers
    (function() {
        const openBtn = document.getElementById('open-create-agent-modal');
        const modal = document.getElementById('create-agent-modal');
        const backdrop = document.getElementById('create-agent-backdrop');
        const content = document.getElementById('create-agent-content');
        const closeBtn = document.getElementById('close-create-agent-modal');

        function openModal() {
            if (!modal) return;
            modal.classList.remove('hidden');
            modal.offsetHeight; // force reflow
            modal.classList.remove('opacity-0');
            modal.classList.add('opacity-100');
            backdrop.classList.remove('bg-transparent');
            backdrop.classList.add('bg-[rgba(29,29,29,0.4)]');
            content.classList.remove('scale-95');
            content.classList.add('scale-100');
            document.body.style.overflow = 'hidden';
        }
        function closeModal() {
            if (!modal) return;
            modal.classList.add('opacity-0');
            modal.classList.remove('opacity-100');
            backdrop.classList.remove('bg-[rgba(29,29,29,0.4)]');
            backdrop.classList.add('bg-transparent');
            content.classList.add('scale-95');
            content.classList.remove('scale-100');
            setTimeout(() => {
                modal.classList.add('hidden');
            }, 200);
            document.body.style.overflow = '';
        }

        if (openBtn) openBtn.addEventListener('click', function(e) { e.preventDefault(); openModal(); });
        if (closeBtn) closeBtn.addEventListener('click', function(e) { e.preventDefault(); closeModal(); });
        if (backdrop) backdrop.addEventListener('click', function(e) { if (e.target === backdrop) closeModal(); });
        document.addEventListener('keydown', function(e) { if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) closeModal(); });
    })();

    // Password toggle for modal
    (function () {
        const pwd = document.getElementById('create-agent-password');
        const toggle = document.getElementById('toggle-create-agent-password');
        const icon = document.getElementById('create-eye-icon');

        if (pwd && toggle && icon) {
            toggle.addEventListener('click', function () {
                const show = pwd.type === 'password';
                pwd.type = show ? 'text' : 'password';
                icon.innerHTML = show
                    ? '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8S1 12 1 12z" stroke-width="2"/><path d="M4 4l16 16" stroke-width="2"/>'
                    : '<path d="M2 12s3.5-7 10-7 10 7 10 7-3.5 7-10 7-10-7-10-7z" stroke-width="2"/><circle cx="12" cy="12" r="3" stroke-width="2"/>';
            });
        }

        const confirmPwd = document.getElementById('create-agent-confirm-password');
        const toggleConfirm = document.getElementById('toggle-create-agent-confirm-password');
        const iconConfirm = document.getElementById('create-eye-icon-confirm');

        if (confirmPwd && toggleConfirm && iconConfirm) {
            toggleConfirm.addEventListener('click', function () {
                const show = confirmPwd.type === 'password';
                confirmPwd.type = show ? 'text' : 'password';
                iconConfirm.innerHTML = show
                    ? '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8S1 12 1 12z" stroke-width="2"/><path d="M4 4l16 16" stroke-width="2"/>'
                    : '<path d="M2 12s3.5-7 10-7 10 7 10 7-3.5 7-10 7-10-7-10-7z" stroke-width="2"/><circle cx="12" cy="12" r="3" stroke-width="2"/>';
            });
        }
    })();
</script>