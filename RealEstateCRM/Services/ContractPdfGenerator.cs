using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using RealEstateCRM.Models;

namespace RealEstateCRM.Services
{
    public class ContractPdfGenerator
    {
        public byte[] Generate(Deal deal, Contact client, Offer? offer, List<DealDeadline> deadlines, decimal brokerPct, decimal agentPct)
        {
            var insp = deadlines.FirstOrDefault(x => x.Type == "Inspection");
            var appr = deadlines.FirstOrDefault(x => x.Type == "Appraisal");
            var loan = deadlines.FirstOrDefault(x => x.Type == "LoanCommitment");
            var clos = deadlines.FirstOrDefault(x => x.Type == "Closing");
            var prop = deal.Property;

            string Money(decimal? v) => v.HasValue ? $"₱ {v.Value:N0}" : "-";
            string Dt(DateTime? v) => v.HasValue ? v.Value.ToString("MMM dd, yyyy") : "-";

            var doc = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Margin(36);
                    page.Size(PageSizes.A4);
                    page.DefaultTextStyle(t => t.FontSize(11));

                    page.Header()
                        .Row(row =>
                        {
                            row.RelativeItem().Column(col =>
                            {
                                col.Item().Text("Real Estate Purchase Contract").FontSize(16).SemiBold();
                                col.Item().Text("Generated by Homey CRM").FontSize(9).FontColor(Colors.Grey.Medium);
                            });
                        });

                    page.Content().Column(col =>
                    {
                        // Parties
                        col.Item().PaddingBottom(4).Text("Parties").SemiBold().FontSize(13);
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(5); });
                            t.Cell().Element(CellHeader).Text("Buyer");
                            t.Cell().Text($"{client.Name} ({client.Email ?? "-"})");
                            t.Cell().Element(CellHeader).Text("Agent");
                            t.Cell().Text(deal.AgentName ?? "-");
                        });

                        col.Item().PaddingTop(10);
                        col.Item().PaddingBottom(4).Text("Property").SemiBold().FontSize(13);
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(5); });
                            t.Cell().Element(CellHeader).Text("Title");
                            t.Cell().Text(prop?.Title ?? deal.Title);
                            t.Cell().Element(CellHeader).Text("Address");
                            t.Cell().Text(prop?.Address ?? "-");
                            t.Cell().Element(CellHeader).Text("Type");
                            t.Cell().Text(prop?.PropertyType ?? "-");
                            t.Cell().Element(CellHeader).Text("List Price");
                            t.Cell().Text(Money(prop?.Price));
                        });

                        col.Item().PaddingTop(10);
                        col.Item().PaddingBottom(4).Text("Financial Terms").SemiBold().FontSize(13);
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(5); });
                            t.Cell().Element(CellHeader).Text("Offer Amount");
                            t.Cell().Text(Money(offer?.Amount ?? deal.OfferAmount));
                            t.Cell().Element(CellHeader).Text("Financing");
                            t.Cell().Text(offer?.FinancingType ?? "-");
                            t.Cell().Element(CellHeader).Text("Earnest Money");
                            t.Cell().Text(Money(offer?.EarnestMoney));
                            t.Cell().Element(CellHeader).Text("Proposed Close Date");
                            t.Cell().Text(Dt(offer?.CloseDate));
                        });

                        col.Item().PaddingTop(10);
                        col.Item().PaddingBottom(4).Text("Deadlines").SemiBold().FontSize(13);
                        col.Item().Table(t =>
                        {
                            t.ColumnsDefinition(c => { c.RelativeColumn(2); c.RelativeColumn(5); });
                            t.Cell().Element(CellHeader).Text("Inspection");
                            t.Cell().Text(Dt(insp?.DueDate));
                            t.Cell().Element(CellHeader).Text("Appraisal");
                            t.Cell().Text(Dt(appr?.DueDate));
                            t.Cell().Element(CellHeader).Text("Loan Commitment");
                            t.Cell().Text(Dt(loan?.DueDate));
                            t.Cell().Element(CellHeader).Text("Closing");
                            t.Cell().Text(Dt(clos?.DueDate));
                        });

                        col.Item().PaddingTop(8);
                        col.Item().Text($"Commission disclosure: Broker {brokerPct}% • Agent {agentPct}%").FontSize(9).FontColor(Colors.Grey.Darken2);

                        col.Item().PaddingTop(10);
                        col.Item().PaddingBottom(4).Text("Standard Terms").SemiBold().FontSize(13);
                        col.Item().Text("• Offer is contingent upon satisfactory property inspection by the Inspection deadline.");
                        col.Item().Text("• Financing contingency applies through the Loan Commitment deadline.");
                        col.Item().Text("• Earnest money is held in escrow and credited at closing, subject to contingency terms.");
                        col.Item().Text("• All parties agree to act in good faith to complete closing by the specified Closing date.");
                    });

                    page.Footer().AlignRight().Text($"Generated {DateTime.UtcNow:MMM dd, yyyy}").FontSize(9).FontColor(Colors.Grey.Medium);
                });
            });

            return doc.GeneratePdf();

            static IContainer CellHeader(IContainer c) => c.PaddingVertical(2).Background("#F5F5F5").PaddingLeft(6).DefaultTextStyle(t => t.SemiBold().FontColor("#555"));
        }
    }
}
